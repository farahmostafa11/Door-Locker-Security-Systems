
door_lock_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00002bd0  00002c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000de  008000de  00002ce2  2**0
                  ALLOC
  3 .stab         000027cc  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001251  00000000  00000000  000054b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006701  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000069b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000094e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a294  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a681  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_3>
      10:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_6>
      1c:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__vector_7>
      20:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__vector_8>
      24:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 07 	call	0xe5c	; 0xe5c <main>
      8a:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ec       	ldi	r26, 0xC8	; 200
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ec       	ldi	r24, 0xC8	; 200
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_printing>:

/*
 * Description : Function to print on the screen the order to the user and * corresponding to each
 * number on the password entered by the user
 */
void LCD_printing(const char *Str){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	a0 97       	sbiw	r28, 0x20	; 32
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	98 a3       	std	Y+32, r25	; 0x20
     b60:	8f 8f       	std	Y+31, r24	; 0x1f
	LCD_sendCommand(LCD_CLEAR_COMMAND);//clear the screen to start new printing
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
	LCD_moveCursor(0,0);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
	LCD_displayString(Str);
     b70:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b72:	98 a1       	ldd	r25, Y+32	; 0x20
     b74:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
	LCD_moveCursor(1,0);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
	for(int i=0;i<5;i++){
     b80:	1e 8e       	std	Y+30, r1	; 0x1e
     b82:	1d 8e       	std	Y+29, r1	; 0x1d
     b84:	bb c0       	rjmp	.+374    	; 0xcfc <LCD_printing+0x1b6>
		password_input[i]=KEYPAD_getPressedKey();
     b86:	0d 8d       	ldd	r16, Y+29	; 0x1d
     b88:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b8a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <KEYPAD_getPressedKey>
     b8e:	f8 01       	movw	r30, r16
     b90:	e8 51       	subi	r30, 0x18	; 24
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	80 83       	st	Z, r24
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <LCD_printing+0x62>
		while((password_input[i]=='+') || (password_input[i]=='-') ||(password_input[i]=='*') \
				||(password_input[i]=='%')|| (password_input[i]==13)|| (password_input[i]=='=')){
			password_input[i]=KEYPAD_getPressedKey();
     b98:	0d 8d       	ldd	r16, Y+29	; 0x1d
     b9a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b9c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <KEYPAD_getPressedKey>
     ba0:	f8 01       	movw	r30, r16
     ba2:	e8 51       	subi	r30, 0x18	; 24
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	80 83       	st	Z, r24
	LCD_moveCursor(0,0);
	LCD_displayString(Str);
	LCD_moveCursor(1,0);
	for(int i=0;i<5;i++){
		password_input[i]=KEYPAD_getPressedKey();
		while((password_input[i]=='+') || (password_input[i]=='-') ||(password_input[i]=='*') \
     ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     baa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bac:	fc 01       	movw	r30, r24
     bae:	e8 51       	subi	r30, 0x18	; 24
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	80 81       	ld	r24, Z
     bb4:	8b 32       	cpi	r24, 0x2B	; 43
     bb6:	81 f3       	breq	.-32     	; 0xb98 <LCD_printing+0x52>
     bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bbc:	fc 01       	movw	r30, r24
     bbe:	e8 51       	subi	r30, 0x18	; 24
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 81       	ld	r24, Z
     bc4:	8d 32       	cpi	r24, 0x2D	; 45
     bc6:	41 f3       	breq	.-48     	; 0xb98 <LCD_printing+0x52>
     bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bcc:	fc 01       	movw	r30, r24
     bce:	e8 51       	subi	r30, 0x18	; 24
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 81       	ld	r24, Z
     bd4:	8a 32       	cpi	r24, 0x2A	; 42
     bd6:	01 f3       	breq	.-64     	; 0xb98 <LCD_printing+0x52>
     bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bda:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bdc:	fc 01       	movw	r30, r24
     bde:	e8 51       	subi	r30, 0x18	; 24
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	80 81       	ld	r24, Z
     be4:	85 32       	cpi	r24, 0x25	; 37
     be6:	c1 f2       	breq	.-80     	; 0xb98 <LCD_printing+0x52>
     be8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bec:	fc 01       	movw	r30, r24
     bee:	e8 51       	subi	r30, 0x18	; 24
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	80 81       	ld	r24, Z
     bf4:	8d 30       	cpi	r24, 0x0D	; 13
     bf6:	81 f2       	breq	.-96     	; 0xb98 <LCD_printing+0x52>
     bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bfc:	fc 01       	movw	r30, r24
     bfe:	e8 51       	subi	r30, 0x18	; 24
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	80 81       	ld	r24, Z
     c04:	8d 33       	cpi	r24, 0x3D	; 61
     c06:	41 f2       	breq	.-112    	; 0xb98 <LCD_printing+0x52>
				||(password_input[i]=='%')|| (password_input[i]==13)|| (password_input[i]=='=')){
			password_input[i]=KEYPAD_getPressedKey();
		}
		LCD_displayCharacter('*');
     c08:	8a e2       	ldi	r24, 0x2A	; 42
     c0a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_displayCharacter>
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	aa ef       	ldi	r26, 0xFA	; 250
     c14:	b4 e4       	ldi	r27, 0x44	; 68
     c16:	89 8f       	std	Y+25, r24	; 0x19
     c18:	9a 8f       	std	Y+26, r25	; 0x1a
     c1a:	ab 8f       	std	Y+27, r26	; 0x1b
     c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c1e:	69 8d       	ldd	r22, Y+25	; 0x19
     c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a e7       	ldi	r20, 0x7A	; 122
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	8d 8b       	std	Y+21, r24	; 0x15
     c38:	9e 8b       	std	Y+22, r25	; 0x16
     c3a:	af 8b       	std	Y+23, r26	; 0x17
     c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c3e:	6d 89       	ldd	r22, Y+21	; 0x15
     c40:	7e 89       	ldd	r23, Y+22	; 0x16
     c42:	8f 89       	ldd	r24, Y+23	; 0x17
     c44:	98 8d       	ldd	r25, Y+24	; 0x18
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e8       	ldi	r20, 0x80	; 128
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c52:	88 23       	and	r24, r24
     c54:	2c f4       	brge	.+10     	; 0xc60 <LCD_printing+0x11a>
		__ticks = 1;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	9c 8b       	std	Y+20, r25	; 0x14
     c5c:	8b 8b       	std	Y+19, r24	; 0x13
     c5e:	3f c0       	rjmp	.+126    	; 0xcde <LCD_printing+0x198>
	else if (__tmp > 65535)
     c60:	6d 89       	ldd	r22, Y+21	; 0x15
     c62:	7e 89       	ldd	r23, Y+22	; 0x16
     c64:	8f 89       	ldd	r24, Y+23	; 0x17
     c66:	98 8d       	ldd	r25, Y+24	; 0x18
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	3f ef       	ldi	r19, 0xFF	; 255
     c6c:	4f e7       	ldi	r20, 0x7F	; 127
     c6e:	57 e4       	ldi	r21, 0x47	; 71
     c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c74:	18 16       	cp	r1, r24
     c76:	4c f5       	brge	.+82     	; 0xcca <LCD_printing+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c78:	69 8d       	ldd	r22, Y+25	; 0x19
     c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	9c 8b       	std	Y+20, r25	; 0x14
     c9e:	8b 8b       	std	Y+19, r24	; 0x13
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <LCD_printing+0x17a>
     ca2:	89 e1       	ldi	r24, 0x19	; 25
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9a 8b       	std	Y+18, r25	; 0x12
     ca8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     caa:	89 89       	ldd	r24, Y+17	; 0x11
     cac:	9a 89       	ldd	r25, Y+18	; 0x12
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <LCD_printing+0x168>
     cb2:	9a 8b       	std	Y+18, r25	; 0x12
     cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	8b 89       	ldd	r24, Y+19	; 0x13
     cb8:	9c 89       	ldd	r25, Y+20	; 0x14
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	9c 8b       	std	Y+20, r25	; 0x14
     cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc0:	8b 89       	ldd	r24, Y+19	; 0x13
     cc2:	9c 89       	ldd	r25, Y+20	; 0x14
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	69 f7       	brne	.-38     	; 0xca2 <LCD_printing+0x15c>
     cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <LCD_printing+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cca:	6d 89       	ldd	r22, Y+21	; 0x15
     ccc:	7e 89       	ldd	r23, Y+22	; 0x16
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	98 8d       	ldd	r25, Y+24	; 0x18
     cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	9c 8b       	std	Y+20, r25	; 0x14
     cdc:	8b 8b       	std	Y+19, r24	; 0x13
     cde:	8b 89       	ldd	r24, Y+19	; 0x13
     ce0:	9c 89       	ldd	r25, Y+20	; 0x14
     ce2:	98 8b       	std	Y+16, r25	; 0x10
     ce4:	8f 87       	std	Y+15, r24	; 0x0f
     ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce8:	98 89       	ldd	r25, Y+16	; 0x10
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <LCD_printing+0x1a4>
     cee:	98 8b       	std	Y+16, r25	; 0x10
     cf0:	8f 87       	std	Y+15, r24	; 0x0f
void LCD_printing(const char *Str){
	LCD_sendCommand(LCD_CLEAR_COMMAND);//clear the screen to start new printing
	LCD_moveCursor(0,0);
	LCD_displayString(Str);
	LCD_moveCursor(1,0);
	for(int i=0;i<5;i++){
     cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	9e 8f       	std	Y+30, r25	; 0x1e
     cfa:	8d 8f       	std	Y+29, r24	; 0x1d
     cfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d00:	85 30       	cpi	r24, 0x05	; 5
     d02:	91 05       	cpc	r25, r1
     d04:	0c f4       	brge	.+2      	; 0xd08 <LCD_printing+0x1c2>
     d06:	3f cf       	rjmp	.-386    	; 0xb86 <LCD_printing+0x40>
			password_input[i]=KEYPAD_getPressedKey();
		}
		LCD_displayCharacter('*');
		_delay_ms(2000);
	}
	while(KEYPAD_getPressedKey()!=13);
     d08:	0e 94 0c 0c 	call	0x1818	; 0x1818 <KEYPAD_getPressedKey>
     d0c:	8d 30       	cpi	r24, 0x0D	; 13
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <LCD_printing+0x1c2>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	aa ef       	ldi	r26, 0xFA	; 250
     d16:	b4 e4       	ldi	r27, 0x44	; 68
     d18:	8b 87       	std	Y+11, r24	; 0x0b
     d1a:	9c 87       	std	Y+12, r25	; 0x0c
     d1c:	ad 87       	std	Y+13, r26	; 0x0d
     d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d20:	6b 85       	ldd	r22, Y+11	; 0x0b
     d22:	7c 85       	ldd	r23, Y+12	; 0x0c
     d24:	8d 85       	ldd	r24, Y+13	; 0x0d
     d26:	9e 85       	ldd	r25, Y+14	; 0x0e
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a e7       	ldi	r20, 0x7A	; 122
     d2e:	53 e4       	ldi	r21, 0x43	; 67
     d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	8f 83       	std	Y+7, r24	; 0x07
     d3a:	98 87       	std	Y+8, r25	; 0x08
     d3c:	a9 87       	std	Y+9, r26	; 0x09
     d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e8       	ldi	r20, 0x80	; 128
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d54:	88 23       	and	r24, r24
     d56:	2c f4       	brge	.+10     	; 0xd62 <LCD_printing+0x21c>
		__ticks = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	3f c0       	rjmp	.+126    	; 0xde0 <LCD_printing+0x29a>
	else if (__tmp > 65535)
     d62:	6f 81       	ldd	r22, Y+7	; 0x07
     d64:	78 85       	ldd	r23, Y+8	; 0x08
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	3f ef       	ldi	r19, 0xFF	; 255
     d6e:	4f e7       	ldi	r20, 0x7F	; 127
     d70:	57 e4       	ldi	r21, 0x47	; 71
     d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d76:	18 16       	cp	r1, r24
     d78:	4c f5       	brge	.+82     	; 0xdcc <LCD_printing+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d80:	9e 85       	ldd	r25, Y+14	; 0x0e
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <LCD_printing+0x27c>
     da4:	89 e1       	ldi	r24, 0x19	; 25
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 83       	std	Y+4, r25	; 0x04
     daa:	8b 83       	std	Y+3, r24	; 0x03
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <LCD_printing+0x26a>
     db4:	9c 83       	std	Y+4, r25	; 0x04
     db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	69 f7       	brne	.-38     	; 0xda4 <LCD_printing+0x25e>
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <LCD_printing+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dcc:	6f 81       	ldd	r22, Y+7	; 0x07
     dce:	78 85       	ldd	r23, Y+8	; 0x08
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <LCD_printing+0x2a6>
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000); /* Press time */
}
     df4:	a0 96       	adiw	r28, 0x20	; 32
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <send_password>:

/*
 * Description : Function to send the entered password by the user to the controlling MCU (MC2)
 * using UART
 */
void send_password(){
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <send_password+0x6>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	for(int i=0;i<5;i++){
     e14:	1a 82       	std	Y+2, r1	; 0x02
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <send_password+0x2a>
		UART_sendByte(password_input[i]);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	fc 01       	movw	r30, r24
     e20:	e8 51       	subi	r30, 0x18	; 24
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	0e 94 b6 14 	call	0x296c	; 0x296c <UART_sendByte>
/*
 * Description : Function to send the entered password by the user to the controlling MCU (MC2)
 * using UART
 */
void send_password(){
	for(int i=0;i<5;i++){
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	85 30       	cpi	r24, 0x05	; 5
     e3a:	91 05       	cpc	r25, r1
     e3c:	74 f3       	brlt	.-36     	; 0xe1a <send_password+0x10>
		UART_sendByte(password_input[i]);
	}
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <call_back_funct>:

/*
 * Description : Function to end the delay time by making the condition of the while loop be false
 */
void call_back_funct(void){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62

	delay_out=1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 e1 00 	sts	0x00E1, r24
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <main>:
int main(void){
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	6e 97       	sbiw	r28, 0x1e	; 30
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
	Timer_setCallBack(call_back_funct,TIMER_1);
     e70:	84 e2       	ldi	r24, 0x24	; 36
     e72:	97 e0       	ldi	r25, 0x07	; 7
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Timer_setCallBack>
	// Enable global interrupts in MC.
	SREG  |= (1<<7);
     e7a:	af e5       	ldi	r26, 0x5F	; 95
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ef e5       	ldi	r30, 0x5F	; 95
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 68       	ori	r24, 0x80	; 128
     e86:	8c 93       	st	X, r24
	LCD_init();
     e88:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <LCD_init>
	UART_init(&UARTCONFIG);
     e8c:	80 ed       	ldi	r24, 0xD0	; 208
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_init>
	while(1){
		change_password=0;	//variable used to check if the user chose to change the password
     e94:	10 92 e0 00 	sts	0x00E0, r1
		password_check=0;
     e98:	10 92 de 00 	sts	0x00DE, r1
		is_right=0;
     e9c:	10 92 df 00 	sts	0x00DF, r1
		change_password=0;
     ea0:	10 92 e0 00 	sts	0x00E0, r1
		//displaying "Please enter Password:" on the screen and take the input from the user
		LCD_printing("Please enter Password:");
     ea4:	80 e6       	ldi	r24, 0x60	; 96
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_printing>
		//sending the password to MC2
		send_password();
     eac:	0e 94 05 07 	call	0xe0a	; 0xe0a <send_password>
		//displaying "Please re_enter Password:" on the screen and take the input from the user
		LCD_printing("Please re_enter Password:");
     eb0:	87 e7       	ldi	r24, 0x77	; 119
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_printing>
		//sending the re-entered password to MC2
		send_password();
     eb8:	0e 94 05 07 	call	0xe0a	; 0xe0a <send_password>
		/*receive byte sent by MC2 which indicates if the 2 passwords are identical or not
		password_check==0 -->identical		password_check==0 -->not identical*/
		password_check=UART_recieveByte();
     ebc:	0e 94 cd 14 	call	0x299a	; 0x299a <UART_recieveByte>
     ec0:	80 93 de 00 	sts	0x00DE, r24
     ec4:	60 c1       	rjmp	.+704    	; 0x1186 <main+0x32a>

		while(password_check==0 && change_password==0){
			//printing the main menu options
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
			LCD_moveCursor(0,0);
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
			LCD_displayString("+: Open Door");
     ed4:	81 e9       	ldi	r24, 0x91	; 145
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
			LCD_moveCursor(1,0);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
			LCD_displayString("-: Change Password");
     ee4:	8e e9       	ldi	r24, 0x9E	; 158
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
			//getting the user choice
			main_menu_choice=KEYPAD_getPressedKey();
     eec:	0e 94 0c 0c 	call	0x1818	; 0x1818 <KEYPAD_getPressedKey>
     ef0:	80 93 ed 00 	sts	0x00ED, r24
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a8 e4       	ldi	r26, 0x48	; 72
     efa:	b3 e4       	ldi	r27, 0x43	; 67
     efc:	89 8f       	std	Y+25, r24	; 0x19
     efe:	9a 8f       	std	Y+26, r25	; 0x1a
     f00:	ab 8f       	std	Y+27, r26	; 0x1b
     f02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	69 8d       	ldd	r22, Y+25	; 0x19
     f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a e7       	ldi	r20, 0x7A	; 122
     f12:	53 e4       	ldi	r21, 0x43	; 67
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8d 8b       	std	Y+21, r24	; 0x15
     f1e:	9e 8b       	std	Y+22, r25	; 0x16
     f20:	af 8b       	std	Y+23, r26	; 0x17
     f22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f24:	6d 89       	ldd	r22, Y+21	; 0x15
     f26:	7e 89       	ldd	r23, Y+22	; 0x16
     f28:	8f 89       	ldd	r24, Y+23	; 0x17
     f2a:	98 8d       	ldd	r25, Y+24	; 0x18
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <main+0xea>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <main+0x168>
	else if (__tmp > 65535)
     f46:	6d 89       	ldd	r22, Y+21	; 0x15
     f48:	7e 89       	ldd	r23, Y+22	; 0x16
     f4a:	8f 89       	ldd	r24, Y+23	; 0x17
     f4c:	98 8d       	ldd	r25, Y+24	; 0x18
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <main+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	69 8d       	ldd	r22, Y+25	; 0x19
     f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <main+0x14a>
     f88:	89 e1       	ldi	r24, 0x19	; 25
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	89 8b       	std	Y+17, r24	; 0x11
     f90:	89 89       	ldd	r24, Y+17	; 0x11
     f92:	9a 89       	ldd	r25, Y+18	; 0x12
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <main+0x138>
     f98:	9a 8b       	std	Y+18, r25	; 0x12
     f9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	8b 89       	ldd	r24, Y+19	; 0x13
     f9e:	9c 89       	ldd	r25, Y+20	; 0x14
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9c 8b       	std	Y+20, r25	; 0x14
     fa4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8b 89       	ldd	r24, Y+19	; 0x13
     fa8:	9c 89       	ldd	r25, Y+20	; 0x14
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <main+0x12c>
     fae:	8b c0       	rjmp	.+278    	; 0x10c6 <main+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9c 8b       	std	Y+20, r25	; 0x14
     fc2:	8b 8b       	std	Y+19, r24	; 0x13
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	9c 89       	ldd	r25, Y+20	; 0x14
     fc8:	98 8b       	std	Y+16, r25	; 0x10
     fca:	8f 87       	std	Y+15, r24	; 0x0f
     fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fce:	98 89       	ldd	r25, Y+16	; 0x10
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <main+0x174>
     fd4:	98 8b       	std	Y+16, r25	; 0x10
     fd6:	8f 87       	std	Y+15, r24	; 0x0f
     fd8:	76 c0       	rjmp	.+236    	; 0x10c6 <main+0x26a>
			_delay_ms(200); /* Press time */
			//wait till the user enters + of - from the main menu
			while(main_menu_choice!='+' && main_menu_choice!='-'){
				main_menu_choice=KEYPAD_getPressedKey();
     fda:	0e 94 0c 0c 	call	0x1818	; 0x1818 <KEYPAD_getPressedKey>
     fde:	80 93 ed 00 	sts	0x00ED, r24
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a8 e4       	ldi	r26, 0x48	; 72
     fe8:	b3 e4       	ldi	r27, 0x43	; 67
     fea:	8b 87       	std	Y+11, r24	; 0x0b
     fec:	9c 87       	std	Y+12, r25	; 0x0c
     fee:	ad 87       	std	Y+13, r26	; 0x0d
     ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a e7       	ldi	r20, 0x7A	; 122
    1000:	53 e4       	ldi	r21, 0x43	; 67
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	a9 87       	std	Y+9, r26	; 0x09
    1010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <main+0x1d8>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <main+0x256>
	else if (__tmp > 65535)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <main+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <main+0x238>
    1076:	89 e1       	ldi	r24, 0x19	; 25
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <main+0x226>
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <main+0x21a>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <main+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <main+0x262>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
			LCD_displayString("-: Change Password");
			//getting the user choice
			main_menu_choice=KEYPAD_getPressedKey();
			_delay_ms(200); /* Press time */
			//wait till the user enters + of - from the main menu
			while(main_menu_choice!='+' && main_menu_choice!='-'){
    10c6:	80 91 ed 00 	lds	r24, 0x00ED
    10ca:	8b 32       	cpi	r24, 0x2B	; 43
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <main+0x27c>
    10ce:	80 91 ed 00 	lds	r24, 0x00ED
    10d2:	8d 32       	cpi	r24, 0x2D	; 45
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <main+0x27c>
    10d6:	81 cf       	rjmp	.-254    	; 0xfda <main+0x17e>
				main_menu_choice=KEYPAD_getPressedKey();
				_delay_ms(200); /* Press time */
			}
			//sending the user choice to MC2
			UART_sendByte(main_menu_choice);//-->S3
    10d8:	80 91 ed 00 	lds	r24, 0x00ED
    10dc:	0e 94 b6 14 	call	0x296c	; 0x296c <UART_sendByte>
			if(main_menu_choice=='+'){
    10e0:	80 91 ed 00 	lds	r24, 0x00ED
    10e4:	8b 32       	cpi	r24, 0x2B	; 43
    10e6:	09 f0       	breq	.+2      	; 0x10ea <main+0x28e>
    10e8:	4b c0       	rjmp	.+150    	; 0x1180 <main+0x324>
				//if the user chose to open the door ('+') then we ask him to enter the password
				//displaying "Please enter Password:" on the screen and take the input from the user
				LCD_printing("Please enter Password:");
    10ea:	80 e6       	ldi	r24, 0x60	; 96
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_printing>
				//sending the password to MC2
				send_password();
    10f2:	0e 94 05 07 	call	0xe0a	; 0xe0a <send_password>
				/*if the user entered the password right "welcome :)" will be printed on the screen till
				the door ends it's opening as the byte is sent by MC2 after opening the door*/
				LCD_sendCommand(LCD_CLEAR_COMMAND);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
				LCD_moveCursor(0,0);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
				LCD_displayString("welcome :)");
    1104:	81 eb       	ldi	r24, 0xB1	; 177
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
				is_right=UART_recieveByte();//-->R2
    110c:	0e 94 cd 14 	call	0x299a	; 0x299a <UART_recieveByte>
    1110:	80 93 df 00 	sts	0x00DF, r24
    1114:	0a c0       	rjmp	.+20     	; 0x112a <main+0x2ce>
					/*
					 * if the user entered wrong password we will ask him to re enter the password
					 * till MC2 confirms the users password by sending 'r' byte
					 * or the user writs the password wrongly for the limited times decided by MC2
					 * so MC2 sends 'x'*/
					LCD_printing("Please enter Password:");
    1116:	80 e6       	ldi	r24, 0x60	; 96
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_printing>
					send_password();
    111e:	0e 94 05 07 	call	0xe0a	; 0xe0a <send_password>
					is_right=UART_recieveByte();//-->R3
    1122:	0e 94 cd 14 	call	0x299a	; 0x299a <UART_recieveByte>
    1126:	80 93 df 00 	sts	0x00DF, r24
				the door ends it's opening as the byte is sent by MC2 after opening the door*/
				LCD_sendCommand(LCD_CLEAR_COMMAND);
				LCD_moveCursor(0,0);
				LCD_displayString("welcome :)");
				is_right=UART_recieveByte();//-->R2
				while(is_right=='w'){
    112a:	80 91 df 00 	lds	r24, 0x00DF
    112e:	87 37       	cpi	r24, 0x77	; 119
    1130:	91 f3       	breq	.-28     	; 0x1116 <main+0x2ba>
					 * so MC2 sends 'x'*/
					LCD_printing("Please enter Password:");
					send_password();
					is_right=UART_recieveByte();//-->R3
				}
				if(is_right!='r'){
    1132:	80 91 df 00 	lds	r24, 0x00DF
    1136:	82 37       	cpi	r24, 0x72	; 114
    1138:	31 f1       	breq	.+76     	; 0x1186 <main+0x32a>
					/*
					 * MC2 sends 'x' so an alert message is printed on the screen for 1 minute*/
					LCD_sendCommand(LCD_CLEAR_COMMAND);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
					LCD_moveCursor(0,0);
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
					LCD_displayString("HARD LUCK:)");
    1148:	8c eb       	ldi	r24, 0xBC	; 188
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
					/*
					 * the timer is set to work on normal (overflow) mood so every 65536 counts
					 * it makes an interrupt so we need 7 counts to make 1 minute
					 * 1minute -->480000 counts*/
					for(int i=0;i<7;i++){
    1150:	1e 8e       	std	Y+30, r1	; 0x1e
    1152:	1d 8e       	std	Y+29, r1	; 0x1d
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <main+0x318>
						Timer_init(&timer_config);
    1156:	87 ed       	ldi	r24, 0xD7	; 215
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 25 13 	call	0x264a	; 0x264a <Timer_init>
						while(delay_out==0);
    115e:	80 91 e1 00 	lds	r24, 0x00E1
    1162:	88 23       	and	r24, r24
    1164:	e1 f3       	breq	.-8      	; 0x115e <main+0x302>
						delay_out=0;
    1166:	10 92 e1 00 	sts	0x00E1, r1
					LCD_displayString("HARD LUCK:)");
					/*
					 * the timer is set to work on normal (overflow) mood so every 65536 counts
					 * it makes an interrupt so we need 7 counts to make 1 minute
					 * 1minute -->480000 counts*/
					for(int i=0;i<7;i++){
    116a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	9e 8f       	std	Y+30, r25	; 0x1e
    1172:	8d 8f       	std	Y+29, r24	; 0x1d
    1174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1178:	87 30       	cpi	r24, 0x07	; 7
    117a:	91 05       	cpc	r25, r1
    117c:	64 f3       	brlt	.-40     	; 0x1156 <main+0x2fa>
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <main+0x32a>
				}
			}
			else{
				/*if the user chose to change the password ('-') then we ask him to repeat the initial
				 *steps*/
				change_password=1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 e0 00 	sts	0x00E0, r24
		send_password();
		/*receive byte sent by MC2 which indicates if the 2 passwords are identical or not
		password_check==0 -->identical		password_check==0 -->not identical*/
		password_check=UART_recieveByte();

		while(password_check==0 && change_password==0){
    1186:	80 91 de 00 	lds	r24, 0x00DE
    118a:	88 23       	and	r24, r24
    118c:	09 f0       	breq	.+2      	; 0x1190 <main+0x334>
    118e:	82 ce       	rjmp	.-764    	; 0xe94 <main+0x38>
    1190:	80 91 e0 00 	lds	r24, 0x00E0
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <main+0x33e>
    1198:	96 ce       	rjmp	.-724    	; 0xec6 <main+0x6a>
    119a:	7c ce       	rjmp	.-776    	; 0xe94 <main+0x38>

0000119c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <GPIO_setupPinDirection+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <GPIO_setupPinDirection+0x8>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	6a 83       	std	Y+2, r22	; 0x02
    11ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <GPIO_setupPinDirection+0x1c>
    11b6:	d5 c0       	rjmp	.+426    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <GPIO_setupPinDirection+0x24>
    11be:	d1 c0       	rjmp	.+418    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3d 83       	std	Y+5, r19	; 0x05
    11c8:	2c 83       	std	Y+4, r18	; 0x04
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <GPIO_setupPinDirection+0x3a>
    11d4:	43 c0       	rjmp	.+134    	; 0x125c <GPIO_setupPinDirection+0xc0>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <GPIO_setupPinDirection+0x4e>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	71 f0       	breq	.+28     	; 0x1204 <GPIO_setupPinDirection+0x68>
    11e8:	bc c0       	rjmp	.+376    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <GPIO_setupPinDirection+0x5a>
    11f4:	5f c0       	rjmp	.+190    	; 0x12b4 <GPIO_setupPinDirection+0x118>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <GPIO_setupPinDirection+0x66>
    1200:	85 c0       	rjmp	.+266    	; 0x130c <GPIO_setupPinDirection+0x170>
    1202:	af c0       	rjmp	.+350    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    120a:	aa e3       	ldi	r26, 0x3A	; 58
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_setupPinDirection+0x8c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_setupPinDirection+0x88>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	98 c0       	rjmp	.+304    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1232:	aa e3       	ldi	r26, 0x3A	; 58
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ea e3       	ldi	r30, 0x3A	; 58
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_setupPinDirection+0xb4>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_setupPinDirection+0xb0>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	83 c0       	rjmp	.+262    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	a1 f4       	brne	.+40     	; 0x128a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1262:	a7 e3       	ldi	r26, 0x37	; 55
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_setupPinDirection+0xe4>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_setupPinDirection+0xe0>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	6c c0       	rjmp	.+216    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    128a:	a7 e3       	ldi	r26, 0x37	; 55
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e7 e3       	ldi	r30, 0x37	; 55
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_setupPinDirection+0x10c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_setupPinDirection+0x108>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	57 c0       	rjmp	.+174    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12ba:	a4 e3       	ldi	r26, 0x34	; 52
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e4 e3       	ldi	r30, 0x34	; 52
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_setupPinDirection+0x13c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_setupPinDirection+0x138>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	40 c0       	rjmp	.+128    	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12e2:	a4 e3       	ldi	r26, 0x34	; 52
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e4 e3       	ldi	r30, 0x34	; 52
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_setupPinDirection+0x164>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_setupPinDirection+0x160>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	2b c0       	rjmp	.+86     	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a1 f4       	brne	.+40     	; 0x133a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1312:	a1 e3       	ldi	r26, 0x31	; 49
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e1 e3       	ldi	r30, 0x31	; 49
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_setupPinDirection+0x194>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_setupPinDirection+0x190>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    133a:	a1 e3       	ldi	r26, 0x31	; 49
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e1 e3       	ldi	r30, 0x31	; 49
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_setupPinDirection+0x1bc>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_setupPinDirection+0x1b8>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <GPIO_writePin+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <GPIO_writePin+0x8>
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
    1384:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <GPIO_writePin+0x1c>
    138c:	d5 c0       	rjmp	.+426    	; 0x1538 <GPIO_writePin+0x1c6>
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	08 f0       	brcs	.+2      	; 0x1396 <GPIO_writePin+0x24>
    1394:	d1 c0       	rjmp	.+418    	; 0x1538 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3d 83       	std	Y+5, r19	; 0x05
    139e:	2c 83       	std	Y+4, r18	; 0x04
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <GPIO_writePin+0x3a>
    13aa:	43 c0       	rjmp	.+134    	; 0x1432 <GPIO_writePin+0xc0>
    13ac:	2c 81       	ldd	r18, Y+4	; 0x04
    13ae:	3d 81       	ldd	r19, Y+5	; 0x05
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <GPIO_writePin+0x4e>
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	71 f0       	breq	.+28     	; 0x13da <GPIO_writePin+0x68>
    13be:	bc c0       	rjmp	.+376    	; 0x1538 <GPIO_writePin+0x1c6>
    13c0:	2c 81       	ldd	r18, Y+4	; 0x04
    13c2:	3d 81       	ldd	r19, Y+5	; 0x05
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <GPIO_writePin+0x5a>
    13ca:	5f c0       	rjmp	.+190    	; 0x148a <GPIO_writePin+0x118>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <GPIO_writePin+0x66>
    13d6:	85 c0       	rjmp	.+266    	; 0x14e2 <GPIO_writePin+0x170>
    13d8:	af c0       	rjmp	.+350    	; 0x1538 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_writePin+0x8c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_writePin+0x88>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	98 c0       	rjmp	.+304    	; 0x1538 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1408:	ab e3       	ldi	r26, 0x3B	; 59
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e3       	ldi	r30, 0x3B	; 59
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <GPIO_writePin+0xb4>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <GPIO_writePin+0xb0>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	83 c0       	rjmp	.+262    	; 0x1538 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1438:	a8 e3       	ldi	r26, 0x38	; 56
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e8 e3       	ldi	r30, 0x38	; 56
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_writePin+0xe4>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_writePin+0xe0>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	6c c0       	rjmp	.+216    	; 0x1538 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1460:	a8 e3       	ldi	r26, 0x38	; 56
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e8 e3       	ldi	r30, 0x38	; 56
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_writePin+0x10c>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_writePin+0x108>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	57 c0       	rjmp	.+174    	; 0x1538 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	a1 f4       	brne	.+40     	; 0x14b8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1490:	a5 e3       	ldi	r26, 0x35	; 53
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_writePin+0x13c>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_writePin+0x138>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	40 c0       	rjmp	.+128    	; 0x1538 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14b8:	a5 e3       	ldi	r26, 0x35	; 53
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <GPIO_writePin+0x164>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <GPIO_writePin+0x160>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	2b c0       	rjmp	.+86     	; 0x1538 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	a1 f4       	brne	.+40     	; 0x1510 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14e8:	a2 e3       	ldi	r26, 0x32	; 50
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <GPIO_writePin+0x194>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <GPIO_writePin+0x190>
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1510:	a2 e3       	ldi	r26, 0x32	; 50
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e2 e3       	ldi	r30, 0x32	; 50
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_writePin+0x1bc>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_writePin+0x1b8>
    1532:	80 95       	com	r24
    1534:	84 23       	and	r24, r20
    1536:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <GPIO_readPin+0x6>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <GPIO_readPin+0x8>
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    155a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	08 f0       	brcs	.+2      	; 0x1564 <GPIO_readPin+0x1c>
    1562:	84 c0       	rjmp	.+264    	; 0x166c <GPIO_readPin+0x124>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	08 f0       	brcs	.+2      	; 0x156c <GPIO_readPin+0x24>
    156a:	80 c0       	rjmp	.+256    	; 0x166c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3d 83       	std	Y+5, r19	; 0x05
    1574:	2c 83       	std	Y+4, r18	; 0x04
    1576:	4c 81       	ldd	r20, Y+4	; 0x04
    1578:	5d 81       	ldd	r21, Y+5	; 0x05
    157a:	41 30       	cpi	r20, 0x01	; 1
    157c:	51 05       	cpc	r21, r1
    157e:	79 f1       	breq	.+94     	; 0x15de <GPIO_readPin+0x96>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	82 30       	cpi	r24, 0x02	; 2
    1586:	91 05       	cpc	r25, r1
    1588:	34 f4       	brge	.+12     	; 0x1596 <GPIO_readPin+0x4e>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	21 15       	cp	r18, r1
    1590:	31 05       	cpc	r19, r1
    1592:	69 f0       	breq	.+26     	; 0x15ae <GPIO_readPin+0x66>
    1594:	6b c0       	rjmp	.+214    	; 0x166c <GPIO_readPin+0x124>
    1596:	4c 81       	ldd	r20, Y+4	; 0x04
    1598:	5d 81       	ldd	r21, Y+5	; 0x05
    159a:	42 30       	cpi	r20, 0x02	; 2
    159c:	51 05       	cpc	r21, r1
    159e:	b9 f1       	breq	.+110    	; 0x160e <GPIO_readPin+0xc6>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <GPIO_readPin+0x64>
    15aa:	49 c0       	rjmp	.+146    	; 0x163e <GPIO_readPin+0xf6>
    15ac:	5f c0       	rjmp	.+190    	; 0x166c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15ae:	e9 e3       	ldi	r30, 0x39	; 57
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a9 01       	movw	r20, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_readPin+0x7e>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_readPin+0x7a>
    15ca:	ca 01       	movw	r24, r20
    15cc:	81 70       	andi	r24, 0x01	; 1
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	88 23       	and	r24, r24
    15d2:	19 f0       	breq	.+6      	; 0x15da <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	49 c0       	rjmp	.+146    	; 0x166c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15da:	19 82       	std	Y+1, r1	; 0x01
    15dc:	47 c0       	rjmp	.+142    	; 0x166c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15de:	e6 e3       	ldi	r30, 0x36	; 54
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_readPin+0xae>
    15f2:	55 95       	asr	r21
    15f4:	47 95       	ror	r20
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_readPin+0xaa>
    15fa:	ca 01       	movw	r24, r20
    15fc:	81 70       	andi	r24, 0x01	; 1
    15fe:	90 70       	andi	r25, 0x00	; 0
    1600:	88 23       	and	r24, r24
    1602:	19 f0       	breq	.+6      	; 0x160a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	31 c0       	rjmp	.+98     	; 0x166c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	2f c0       	rjmp	.+94     	; 0x166c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    160e:	e3 e3       	ldi	r30, 0x33	; 51
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <GPIO_readPin+0xde>
    1622:	55 95       	asr	r21
    1624:	47 95       	ror	r20
    1626:	8a 95       	dec	r24
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <GPIO_readPin+0xda>
    162a:	ca 01       	movw	r24, r20
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	88 23       	and	r24, r24
    1632:	19 f0       	breq	.+6      	; 0x163a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	19 c0       	rjmp	.+50     	; 0x166c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    163a:	19 82       	std	Y+1, r1	; 0x01
    163c:	17 c0       	rjmp	.+46     	; 0x166c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    163e:	e0 e3       	ldi	r30, 0x30	; 48
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <GPIO_readPin+0x10e>
    1652:	55 95       	asr	r21
    1654:	47 95       	ror	r20
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <GPIO_readPin+0x10a>
    165a:	ca 01       	movw	r24, r20
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	90 70       	andi	r25, 0x00	; 0
    1660:	88 23       	and	r24, r24
    1662:	19 f0       	breq	.+6      	; 0x166a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	01 c0       	rjmp	.+2      	; 0x166c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    166a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <GPIO_setupPortDirection+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <GPIO_setupPortDirection+0x8>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	84 30       	cpi	r24, 0x04	; 4
    1692:	90 f5       	brcc	.+100    	; 0x16f8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3c 83       	std	Y+4, r19	; 0x04
    169c:	2b 83       	std	Y+3, r18	; 0x03
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	d1 f0       	breq	.+52     	; 0x16dc <GPIO_setupPortDirection+0x5e>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	2c f4       	brge	.+10     	; 0x16bc <GPIO_setupPortDirection+0x3e>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <GPIO_setupPortDirection+0x54>
    16ba:	1e c0       	rjmp	.+60     	; 0x16f8 <GPIO_setupPortDirection+0x7a>
    16bc:	2b 81       	ldd	r18, Y+3	; 0x03
    16be:	3c 81       	ldd	r19, Y+4	; 0x04
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	81 f0       	breq	.+32     	; 0x16e6 <GPIO_setupPortDirection+0x68>
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	91 05       	cpc	r25, r1
    16ce:	81 f0       	breq	.+32     	; 0x16f0 <GPIO_setupPortDirection+0x72>
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16d2:	ea e3       	ldi	r30, 0x3A	; 58
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	80 83       	st	Z, r24
    16da:	0e c0       	rjmp	.+28     	; 0x16f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16dc:	e7 e3       	ldi	r30, 0x37	; 55
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 83       	st	Z, r24
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 83       	st	Z, r24
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16f0:	e1 e3       	ldi	r30, 0x31	; 49
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <GPIO_writePort+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <GPIO_writePort+0x8>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	84 30       	cpi	r24, 0x04	; 4
    171a:	90 f5       	brcc	.+100    	; 0x1780 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3c 83       	std	Y+4, r19	; 0x04
    1724:	2b 83       	std	Y+3, r18	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	d1 f0       	breq	.+52     	; 0x1764 <GPIO_writePort+0x5e>
    1730:	2b 81       	ldd	r18, Y+3	; 0x03
    1732:	3c 81       	ldd	r19, Y+4	; 0x04
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <GPIO_writePort+0x3e>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <GPIO_writePort+0x54>
    1742:	1e c0       	rjmp	.+60     	; 0x1780 <GPIO_writePort+0x7a>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <GPIO_writePort+0x68>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <GPIO_writePort+0x72>
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	80 83       	st	Z, r24
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <GPIO_readPort+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_readPort+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    179c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	90 f5       	brcc	.+100    	; 0x1808 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3c 83       	std	Y+4, r19	; 0x04
    17ac:	2b 83       	std	Y+3, r18	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <GPIO_readPort+0x5e>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <GPIO_readPort+0x3e>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <GPIO_readPort+0x54>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <GPIO_readPort+0x7a>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <GPIO_readPort+0x68>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <GPIO_readPort+0x72>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17e2:	e9 e3       	ldi	r30, 0x39	; 57
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17ec:	e6 e3       	ldi	r30, 0x36	; 54
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17f6:	e3 e3       	ldi	r30, 0x33	; 51
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1800:	e0 e3       	ldi	r30, 0x30	; 48
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <KEYPAD_getPressedKey+0x6>
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1824:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1826:	1b 82       	std	Y+3, r1	; 0x03
    1828:	43 c0       	rjmp	.+134    	; 0x18b0 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	98 2f       	mov	r25, r24
    1836:	9c 5f       	subi	r25, 0xFC	; 252
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	69 2f       	mov	r22, r25
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9c 01       	movw	r18, r24
    184a:	2c 5f       	subi	r18, 0xFC	; 252
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <KEYPAD_getPressedKey+0x40>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	2a 95       	dec	r18
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <KEYPAD_getPressedKey+0x3c>
    185c:	80 95       	com	r24
    185e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	69 81       	ldd	r22, Y+1	; 0x01
    1864:	0e 94 83 0b 	call	0x1706	; 0x1706 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1868:	1a 82       	std	Y+2, r1	; 0x02
    186a:	1c c0       	rjmp	.+56     	; 0x18a4 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	6a 81       	ldd	r22, Y+2	; 0x02
    1870:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GPIO_readPin>
    1874:	88 23       	and	r24, r24
    1876:	99 f4       	brne	.+38     	; 0x189e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	98 2f       	mov	r25, r24
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	89 0f       	add	r24, r25
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	8f 5f       	subi	r24, 0xFF	; 255
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	08 f3       	brcs	.-62     	; 0x186c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <KEYPAD_getPressedKey+0xa0>
    18b6:	b9 cf       	rjmp	.-142    	; 0x182a <KEYPAD_getPressedKey+0x12>
    18b8:	b6 cf       	rjmp	.-148    	; 0x1826 <KEYPAD_getPressedKey+0xe>

000018ba <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3c 83       	std	Y+4, r19	; 0x04
    18d2:	2b 83       	std	Y+3, r18	; 0x03
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	88 30       	cpi	r24, 0x08	; 8
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    18de:	70 c0       	rjmp	.+224    	; 0x19c0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	29 30       	cpi	r18, 0x09	; 9
    18e6:	31 05       	cpc	r19, r1
    18e8:	5c f5       	brge	.+86     	; 0x1940 <KEYPAD_4x4_adjustKeyNumber+0x86>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    18f4:	59 c0       	rjmp	.+178    	; 0x19a8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	25 30       	cpi	r18, 0x05	; 5
    18fc:	31 05       	cpc	r19, r1
    18fe:	9c f4       	brge	.+38     	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <KEYPAD_4x4_adjustKeyNumber+0x52>
    190a:	48 c0       	rjmp	.+144    	; 0x199c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	23 30       	cpi	r18, 0x03	; 3
    1912:	31 05       	cpc	r19, r1
    1914:	0c f0       	brlt	.+2      	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1916:	45 c0       	rjmp	.+138    	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	91 05       	cpc	r25, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1922:	39 c0       	rjmp	.+114    	; 0x1996 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1924:	67 c0       	rjmp	.+206    	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1926:	2b 81       	ldd	r18, Y+3	; 0x03
    1928:	3c 81       	ldd	r19, Y+4	; 0x04
    192a:	26 30       	cpi	r18, 0x06	; 6
    192c:	31 05       	cpc	r19, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1930:	41 c0       	rjmp	.+130    	; 0x19b4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	87 30       	cpi	r24, 0x07	; 7
    1938:	91 05       	cpc	r25, r1
    193a:	0c f0       	brlt	.+2      	; 0x193e <KEYPAD_4x4_adjustKeyNumber+0x84>
    193c:	3e c0       	rjmp	.+124    	; 0x19ba <KEYPAD_4x4_adjustKeyNumber+0x100>
    193e:	37 c0       	rjmp	.+110    	; 0x19ae <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	2c 30       	cpi	r18, 0x0C	; 12
    1946:	31 05       	cpc	r19, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <KEYPAD_4x4_adjustKeyNumber+0x92>
    194a:	46 c0       	rjmp	.+140    	; 0x19d8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	8d 30       	cpi	r24, 0x0D	; 13
    1952:	91 05       	cpc	r25, r1
    1954:	5c f4       	brge	.+22     	; 0x196c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	2a 30       	cpi	r18, 0x0A	; 10
    195c:	31 05       	cpc	r19, r1
    195e:	b1 f1       	breq	.+108    	; 0x19cc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	8b 30       	cpi	r24, 0x0B	; 11
    1966:	91 05       	cpc	r25, r1
    1968:	a4 f5       	brge	.+104    	; 0x19d2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    196a:	2d c0       	rjmp	.+90     	; 0x19c6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	2e 30       	cpi	r18, 0x0E	; 14
    1972:	31 05       	cpc	r19, r1
    1974:	b9 f1       	breq	.+110    	; 0x19e4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	8e 30       	cpi	r24, 0x0E	; 14
    197c:	91 05       	cpc	r25, r1
    197e:	7c f1       	brlt	.+94     	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x124>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	2f 30       	cpi	r18, 0x0F	; 15
    1986:	31 05       	cpc	r19, r1
    1988:	79 f1       	breq	.+94     	; 0x19e8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	80 31       	cpi	r24, 0x10	; 16
    1990:	91 05       	cpc	r25, r1
    1992:	69 f1       	breq	.+90     	; 0x19ee <KEYPAD_4x4_adjustKeyNumber+0x134>
    1994:	2f c0       	rjmp	.+94     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1996:	87 e0       	ldi	r24, 0x07	; 7
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	2e c0       	rjmp	.+92     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    199c:	88 e0       	ldi	r24, 0x08	; 8
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	2b c0       	rjmp	.+86     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19a2:	89 e0       	ldi	r24, 0x09	; 9
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	28 c0       	rjmp	.+80     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19a8:	85 e2       	ldi	r24, 0x25	; 37
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	25 c0       	rjmp	.+74     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	22 c0       	rjmp	.+68     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19b4:	85 e0       	ldi	r24, 0x05	; 5
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	1c c0       	rjmp	.+56     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19c0:	8a e2       	ldi	r24, 0x2A	; 42
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	19 c0       	rjmp	.+50     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	10 c0       	rjmp	.+32     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19d8:	8d e2       	ldi	r24, 0x2D	; 45
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	0d c0       	rjmp	.+26     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19de:	8d e0       	ldi	r24, 0x0D	; 13
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	0a c0       	rjmp	.+20     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    19e4:	19 82       	std	Y+1, r1	; 0x01
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19e8:	8d e3       	ldi	r24, 0x3D	; 61
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    19ee:	8b e2       	ldi	r24, 0x2B	; 43
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 ce 08 	call	0x119c	; 0x119c <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	6f ef       	ldi	r22, 0xFF	; 255
    1a32:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1a36:	88 e3       	ldi	r24, 0x38	; 56
    1a38:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a3c:	8c e0       	ldi	r24, 0x0C	; 12
    1a3e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
}
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	e9 97       	sbiw	r28, 0x39	; 57
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e8       	ldi	r26, 0x80	; 128
    1a7e:	bf e3       	ldi	r27, 0x3F	; 63
    1a80:	8d ab       	std	Y+53, r24	; 0x35
    1a82:	9e ab       	std	Y+54, r25	; 0x36
    1a84:	af ab       	std	Y+55, r26	; 0x37
    1a86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a88:	6d a9       	ldd	r22, Y+53	; 0x35
    1a8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a e7       	ldi	r20, 0x7A	; 122
    1a96:	53 e4       	ldi	r21, 0x43	; 67
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	89 ab       	std	Y+49, r24	; 0x31
    1aa2:	9a ab       	std	Y+50, r25	; 0x32
    1aa4:	ab ab       	std	Y+51, r26	; 0x33
    1aa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	2c f4       	brge	.+10     	; 0x1aca <LCD_sendCommand+0x7c>
		__ticks = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
    1ac8:	3f c0       	rjmp	.+126    	; 0x1b48 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1aca:	69 a9       	ldd	r22, Y+49	; 0x31
    1acc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ace:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	4c f5       	brge	.+82     	; 0x1b34 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	8f a7       	std	Y+47, r24	; 0x2f
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <LCD_sendCommand+0xdc>
    1b0c:	89 e1       	ldi	r24, 0x19	; 25
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e a7       	std	Y+46, r25	; 0x2e
    1b12:	8d a7       	std	Y+45, r24	; 0x2d
    1b14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_sendCommand+0xca>
    1b1c:	9e a7       	std	Y+46, r25	; 0x2e
    1b1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b22:	98 a9       	ldd	r25, Y+48	; 0x30
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <LCD_sendCommand+0xbe>
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	69 a9       	ldd	r22, Y+49	; 0x31
    1b36:	7a a9       	ldd	r23, Y+50	; 0x32
    1b38:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
    1b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4c:	9c a7       	std	Y+44, r25	; 0x2c
    1b4e:	8b a7       	std	Y+43, r24	; 0x2b
    1b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_sendCommand+0x106>
    1b58:	9c a7       	std	Y+44, r25	; 0x2c
    1b5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	62 e0       	ldi	r22, 0x02	; 2
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e8       	ldi	r26, 0x80	; 128
    1b6c:	bf e3       	ldi	r27, 0x3F	; 63
    1b6e:	8f a3       	std	Y+39, r24	; 0x27
    1b70:	98 a7       	std	Y+40, r25	; 0x28
    1b72:	a9 a7       	std	Y+41, r26	; 0x29
    1b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6f a1       	ldd	r22, Y+39	; 0x27
    1b78:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a e7       	ldi	r20, 0x7A	; 122
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	8b a3       	std	Y+35, r24	; 0x23
    1b90:	9c a3       	std	Y+36, r25	; 0x24
    1b92:	ad a3       	std	Y+37, r26	; 0x25
    1b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b96:	6b a1       	ldd	r22, Y+35	; 0x23
    1b98:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bba:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <LCD_sendCommand+0x1ca>
    1bfa:	89 e1       	ldi	r24, 0x19	; 25
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	98 a3       	std	Y+32, r25	; 0x20
    1c00:	8f 8f       	std	Y+31, r24	; 0x1f
    1c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c04:	98 a1       	ldd	r25, Y+32	; 0x20
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_sendCommand+0x1b8>
    1c0a:	98 a3       	std	Y+32, r25	; 0x20
    1c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <LCD_sendCommand+0x1ac>
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9a a3       	std	Y+34, r25	; 0x22
    1c34:	89 a3       	std	Y+33, r24	; 0x21
    1c36:	89 a1       	ldd	r24, Y+33	; 0x21
    1c38:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_sendCommand+0x1f4>
    1c46:	9e 8f       	std	Y+30, r25	; 0x1e
    1c48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	69 ad       	ldd	r22, Y+57	; 0x39
    1c4e:	0e 94 83 0b 	call	0x1706	; 0x1706 <GPIO_writePort>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e8       	ldi	r26, 0x80	; 128
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	89 8f       	std	Y+25, r24	; 0x19
    1c5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8d 8b       	std	Y+21, r24	; 0x15
    1c7c:	9e 8b       	std	Y+22, r25	; 0x16
    1c7e:	af 8b       	std	Y+23, r26	; 0x17
    1c80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c82:	6d 89       	ldd	r22, Y+21	; 0x15
    1c84:	7e 89       	ldd	r23, Y+22	; 0x16
    1c86:	8f 89       	ldd	r24, Y+23	; 0x17
    1c88:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_sendCommand+0x256>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_sendCommand+0x2b6>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9a 8b       	std	Y+18, r25	; 0x12
    1cec:	89 8b       	std	Y+17, r24	; 0x11
    1cee:	89 89       	ldd	r24, Y+17	; 0x11
    1cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_sendCommand+0x2a4>
    1cf6:	9a 8b       	std	Y+18, r25	; 0x12
    1cf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8b 89       	ldd	r24, Y+19	; 0x13
    1d06:	9c 89       	ldd	r25, Y+20	; 0x14
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_sendCommand+0x298>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d10:	7e 89       	ldd	r23, Y+22	; 0x16
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	98 8b       	std	Y+16, r25	; 0x10
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
    1d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2c:	98 89       	ldd	r25, Y+16	; 0x10
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_sendCommand+0x2e0>
    1d32:	98 8b       	std	Y+16, r25	; 0x10
    1d34:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	62 e0       	ldi	r22, 0x02	; 2
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	8b 87       	std	Y+11, r24	; 0x0b
    1d4a:	9c 87       	std	Y+12, r25	; 0x0c
    1d4c:	ad 87       	std	Y+13, r26	; 0x0d
    1d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a e7       	ldi	r20, 0x7A	; 122
    1d5e:	53 e4       	ldi	r21, 0x43	; 67
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8f 83       	std	Y+7, r24	; 0x07
    1d6a:	98 87       	std	Y+8, r25	; 0x08
    1d6c:	a9 87       	std	Y+9, r26	; 0x09
    1d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <LCD_sendCommand+0x344>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <LCD_sendCommand+0x3a4>
    1dd4:	89 e1       	ldi	r24, 0x19	; 25
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	8b 83       	std	Y+3, r24	; 0x03
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_sendCommand+0x392>
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <LCD_sendCommand+0x386>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfe:	78 85       	ldd	r23, Y+8	; 0x08
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_sendCommand+0x3ce>
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1e24:	e9 96       	adiw	r28, 0x39	; 57
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	e9 97       	sbiw	r28, 0x39	; 57
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e8       	ldi	r26, 0x80	; 128
    1e66:	bf e3       	ldi	r27, 0x3F	; 63
    1e68:	8d ab       	std	Y+53, r24	; 0x35
    1e6a:	9e ab       	std	Y+54, r25	; 0x36
    1e6c:	af ab       	std	Y+55, r26	; 0x37
    1e6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	6d a9       	ldd	r22, Y+53	; 0x35
    1e72:	7e a9       	ldd	r23, Y+54	; 0x36
    1e74:	8f a9       	ldd	r24, Y+55	; 0x37
    1e76:	98 ad       	ldd	r25, Y+56	; 0x38
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	53 e4       	ldi	r21, 0x43	; 67
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	89 ab       	std	Y+49, r24	; 0x31
    1e8a:	9a ab       	std	Y+50, r25	; 0x32
    1e8c:	ab ab       	std	Y+51, r26	; 0x33
    1e8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e90:	69 a9       	ldd	r22, Y+49	; 0x31
    1e92:	7a a9       	ldd	r23, Y+50	; 0x32
    1e94:	8b a9       	ldd	r24, Y+51	; 0x33
    1e96:	9c a9       	ldd	r25, Y+52	; 0x34
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	98 ab       	std	Y+48, r25	; 0x30
    1eae:	8f a7       	std	Y+47, r24	; 0x2f
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1eb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6d a9       	ldd	r22, Y+53	; 0x35
    1ecc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ece:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	98 ab       	std	Y+48, r25	; 0x30
    1ef0:	8f a7       	std	Y+47, r24	; 0x2f
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <LCD_displayCharacter+0xdc>
    1ef4:	89 e1       	ldi	r24, 0x19	; 25
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e a7       	std	Y+46, r25	; 0x2e
    1efa:	8d a7       	std	Y+45, r24	; 0x2d
    1efc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1efe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_displayCharacter+0xca>
    1f04:	9e a7       	std	Y+46, r25	; 0x2e
    1f06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	98 ab       	std	Y+48, r25	; 0x30
    1f10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f14:	98 a9       	ldd	r25, Y+48	; 0x30
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <LCD_displayCharacter+0xbe>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f20:	8b a9       	ldd	r24, Y+51	; 0x33
    1f22:	9c a9       	ldd	r25, Y+52	; 0x34
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	98 ab       	std	Y+48, r25	; 0x30
    1f2e:	8f a7       	std	Y+47, r24	; 0x2f
    1f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f32:	98 a9       	ldd	r25, Y+48	; 0x30
    1f34:	9c a7       	std	Y+44, r25	; 0x2c
    1f36:	8b a7       	std	Y+43, r24	; 0x2b
    1f38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_displayCharacter+0x106>
    1f40:	9c a7       	std	Y+44, r25	; 0x2c
    1f42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e8       	ldi	r26, 0x80	; 128
    1f54:	bf e3       	ldi	r27, 0x3F	; 63
    1f56:	8f a3       	std	Y+39, r24	; 0x27
    1f58:	98 a7       	std	Y+40, r25	; 0x28
    1f5a:	a9 a7       	std	Y+41, r26	; 0x29
    1f5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f60:	78 a5       	ldd	r23, Y+40	; 0x28
    1f62:	89 a5       	ldd	r24, Y+41	; 0x29
    1f64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a e7       	ldi	r20, 0x7A	; 122
    1f6c:	53 e4       	ldi	r21, 0x43	; 67
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8b a3       	std	Y+35, r24	; 0x23
    1f78:	9c a3       	std	Y+36, r25	; 0x24
    1f7a:	ad a3       	std	Y+37, r26	; 0x25
    1f7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f80:	7c a1       	ldd	r23, Y+36	; 0x24
    1f82:	8d a1       	ldd	r24, Y+37	; 0x25
    1f84:	9e a1       	ldd	r25, Y+38	; 0x26
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9a a3       	std	Y+34, r25	; 0x22
    1f9c:	89 a3       	std	Y+33, r24	; 0x21
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fba:	78 a5       	ldd	r23, Y+40	; 0x28
    1fbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9a a3       	std	Y+34, r25	; 0x22
    1fde:	89 a3       	std	Y+33, r24	; 0x21
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_displayCharacter+0x1ca>
    1fe2:	89 e1       	ldi	r24, 0x19	; 25
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	98 a3       	std	Y+32, r25	; 0x20
    1fe8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fec:	98 a1       	ldd	r25, Y+32	; 0x20
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_displayCharacter+0x1b8>
    1ff2:	98 a3       	std	Y+32, r25	; 0x20
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9a a3       	std	Y+34, r25	; 0x22
    1ffe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	89 a1       	ldd	r24, Y+33	; 0x21
    2002:	9a a1       	ldd	r25, Y+34	; 0x22
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_displayCharacter+0x1ac>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6b a1       	ldd	r22, Y+35	; 0x23
    200c:	7c a1       	ldd	r23, Y+36	; 0x24
    200e:	8d a1       	ldd	r24, Y+37	; 0x25
    2010:	9e a1       	ldd	r25, Y+38	; 0x26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9a a3       	std	Y+34, r25	; 0x22
    201c:	89 a3       	std	Y+33, r24	; 0x21
    201e:	89 a1       	ldd	r24, Y+33	; 0x21
    2020:	9a a1       	ldd	r25, Y+34	; 0x22
    2022:	9e 8f       	std	Y+30, r25	; 0x1e
    2024:	8d 8f       	std	Y+29, r24	; 0x1d
    2026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2028:	9e 8d       	ldd	r25, Y+30	; 0x1e
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_displayCharacter+0x1f4>
    202e:	9e 8f       	std	Y+30, r25	; 0x1e
    2030:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	69 ad       	ldd	r22, Y+57	; 0x39
    2036:	0e 94 83 0b 	call	0x1706	; 0x1706 <GPIO_writePort>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	a0 e8       	ldi	r26, 0x80	; 128
    2040:	bf e3       	ldi	r27, 0x3F	; 63
    2042:	89 8f       	std	Y+25, r24	; 0x19
    2044:	9a 8f       	std	Y+26, r25	; 0x1a
    2046:	ab 8f       	std	Y+27, r26	; 0x1b
    2048:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204a:	69 8d       	ldd	r22, Y+25	; 0x19
    204c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    204e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a e7       	ldi	r20, 0x7A	; 122
    2058:	53 e4       	ldi	r21, 0x43	; 67
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8d 8b       	std	Y+21, r24	; 0x15
    2064:	9e 8b       	std	Y+22, r25	; 0x16
    2066:	af 8b       	std	Y+23, r26	; 0x17
    2068:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e8       	ldi	r20, 0x80	; 128
    2078:	5f e3       	ldi	r21, 0x3F	; 63
    207a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207e:	88 23       	and	r24, r24
    2080:	2c f4       	brge	.+10     	; 0x208c <LCD_displayCharacter+0x256>
		__ticks = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9c 8b       	std	Y+20, r25	; 0x14
    2088:	8b 8b       	std	Y+19, r24	; 0x13
    208a:	3f c0       	rjmp	.+126    	; 0x210a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    208c:	6d 89       	ldd	r22, Y+21	; 0x15
    208e:	7e 89       	ldd	r23, Y+22	; 0x16
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	4c f5       	brge	.+82     	; 0x20f6 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	69 8d       	ldd	r22, Y+25	; 0x19
    20a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9c 8b       	std	Y+20, r25	; 0x14
    20ca:	8b 8b       	std	Y+19, r24	; 0x13
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <LCD_displayCharacter+0x2b6>
    20ce:	89 e1       	ldi	r24, 0x19	; 25
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9a 8b       	std	Y+18, r25	; 0x12
    20d4:	89 8b       	std	Y+17, r24	; 0x11
    20d6:	89 89       	ldd	r24, Y+17	; 0x11
    20d8:	9a 89       	ldd	r25, Y+18	; 0x12
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <LCD_displayCharacter+0x2a4>
    20de:	9a 8b       	std	Y+18, r25	; 0x12
    20e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	8b 89       	ldd	r24, Y+19	; 0x13
    20ee:	9c 89       	ldd	r25, Y+20	; 0x14
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	69 f7       	brne	.-38     	; 0x20ce <LCD_displayCharacter+0x298>
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	6d 89       	ldd	r22, Y+21	; 0x15
    20f8:	7e 89       	ldd	r23, Y+22	; 0x16
    20fa:	8f 89       	ldd	r24, Y+23	; 0x17
    20fc:	98 8d       	ldd	r25, Y+24	; 0x18
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9c 8b       	std	Y+20, r25	; 0x14
    2108:	8b 8b       	std	Y+19, r24	; 0x13
    210a:	8b 89       	ldd	r24, Y+19	; 0x13
    210c:	9c 89       	ldd	r25, Y+20	; 0x14
    210e:	98 8b       	std	Y+16, r25	; 0x10
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	8f 85       	ldd	r24, Y+15	; 0x0f
    2114:	98 89       	ldd	r25, Y+16	; 0x10
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_displayCharacter+0x2e0>
    211a:	98 8b       	std	Y+16, r25	; 0x10
    211c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	62 e0       	ldi	r22, 0x02	; 2
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 b9 09 	call	0x1372	; 0x1372 <GPIO_writePin>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e8       	ldi	r26, 0x80	; 128
    212e:	bf e3       	ldi	r27, 0x3F	; 63
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	9c 87       	std	Y+12, r25	; 0x0c
    2134:	ad 87       	std	Y+13, r26	; 0x0d
    2136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a e7       	ldi	r20, 0x7A	; 122
    2146:	53 e4       	ldi	r21, 0x43	; 67
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8f 83       	std	Y+7, r24	; 0x07
    2152:	98 87       	std	Y+8, r25	; 0x08
    2154:	a9 87       	std	Y+9, r26	; 0x09
    2156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <LCD_displayCharacter+0x344>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6b 85       	ldd	r22, Y+11	; 0x0b
    2194:	7c 85       	ldd	r23, Y+12	; 0x0c
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <LCD_displayCharacter+0x3a4>
    21bc:	89 e1       	ldi	r24, 0x19	; 25
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_displayCharacter+0x392>
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	9e 81       	ldd	r25, Y+6	; 0x06
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <LCD_displayCharacter+0x386>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_displayCharacter+0x3ce>
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    220c:	e9 96       	adiw	r28, 0x39	; 57
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <LCD_displayString+0x6>
    2224:	0f 92       	push	r0
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	9b 83       	std	Y+3, r25	; 0x03
    222c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	0e c0       	rjmp	.+28     	; 0x224e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	fc 01       	movw	r30, r24
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	80 81       	ld	r24, Z
    2244:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_displayCharacter>
		i++;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	fc 01       	movw	r30, r24
    225a:	e2 0f       	add	r30, r18
    225c:	f3 1f       	adc	r31, r19
    225e:	80 81       	ld	r24, Z
    2260:	88 23       	and	r24, r24
    2262:	39 f7       	brne	.-50     	; 0x2232 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <LCD_moveCursor+0x6>
    2276:	00 d0       	rcall	.+0      	; 0x2278 <LCD_moveCursor+0x8>
    2278:	0f 92       	push	r0
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	8a 83       	std	Y+2, r24	; 0x02
    2280:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3d 83       	std	Y+5, r19	; 0x05
    228a:	2c 83       	std	Y+4, r18	; 0x04
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	91 05       	cpc	r25, r1
    2294:	c1 f0       	breq	.+48     	; 0x22c6 <LCD_moveCursor+0x56>
    2296:	2c 81       	ldd	r18, Y+4	; 0x04
    2298:	3d 81       	ldd	r19, Y+5	; 0x05
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	2c f4       	brge	.+10     	; 0x22aa <LCD_moveCursor+0x3a>
    22a0:	8c 81       	ldd	r24, Y+4	; 0x04
    22a2:	9d 81       	ldd	r25, Y+5	; 0x05
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	61 f0       	breq	.+24     	; 0x22c0 <LCD_moveCursor+0x50>
    22a8:	19 c0       	rjmp	.+50     	; 0x22dc <LCD_moveCursor+0x6c>
    22aa:	2c 81       	ldd	r18, Y+4	; 0x04
    22ac:	3d 81       	ldd	r19, Y+5	; 0x05
    22ae:	22 30       	cpi	r18, 0x02	; 2
    22b0:	31 05       	cpc	r19, r1
    22b2:	69 f0       	breq	.+26     	; 0x22ce <LCD_moveCursor+0x5e>
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	91 05       	cpc	r25, r1
    22bc:	61 f0       	breq	.+24     	; 0x22d6 <LCD_moveCursor+0x66>
    22be:	0e c0       	rjmp	.+28     	; 0x22dc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	0b c0       	rjmp	.+22     	; 0x22dc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	80 5c       	subi	r24, 0xC0	; 192
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	80 5f       	subi	r24, 0xF0	; 240
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	03 c0       	rjmp	.+6      	; 0x22dc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	80 5b       	subi	r24, 0xB0	; 176
    22da:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	80 68       	ori	r24, 0x80	; 128
    22e0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <LCD_displayStringRowColumn+0x6>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <LCD_displayStringRowColumn+0x8>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	6a 83       	std	Y+2, r22	; 0x02
    2304:	5c 83       	std	Y+4, r21	; 0x04
    2306:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	6a 81       	ldd	r22, Y+2	; 0x02
    230c:	0e 94 38 11 	call	0x2270	; 0x2270 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	62 97       	sbiw	r28, 0x12	; 18
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	9a 8b       	std	Y+18, r25	; 0x12
    233c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    233e:	89 89       	ldd	r24, Y+17	; 0x11
    2340:	9a 89       	ldd	r25, Y+18	; 0x12
    2342:	9e 01       	movw	r18, r28
    2344:	2f 5f       	subi	r18, 0xFF	; 255
    2346:	3f 4f       	sbci	r19, 0xFF	; 255
    2348:	b9 01       	movw	r22, r18
    234a:	4a e0       	ldi	r20, 0x0A	; 10
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <itoa>
   LCD_displayString(buff); /* Display the string */
    2352:	ce 01       	movw	r24, r28
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_displayString>
}
    235a:	62 96       	adiw	r28, 0x12	; 18
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LCD_sendCommand>
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <__vector_19>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_COMP_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_0 != NULL_PTR)
    23aa:	80 91 e2 00 	lds	r24, 0x00E2
    23ae:	90 91 e3 00 	lds	r25, 0x00E3
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	29 f0       	breq	.+10     	; 0x23c0 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23b6:	e0 91 e2 00 	lds	r30, 0x00E2
    23ba:	f0 91 e3 00 	lds	r31, 0x00E3
    23be:	09 95       	icall
	}
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	ff 91       	pop	r31
    23c6:	ef 91       	pop	r30
    23c8:	bf 91       	pop	r27
    23ca:	af 91       	pop	r26
    23cc:	9f 91       	pop	r25
    23ce:	8f 91       	pop	r24
    23d0:	7f 91       	pop	r23
    23d2:	6f 91       	pop	r22
    23d4:	5f 91       	pop	r21
    23d6:	4f 91       	pop	r20
    23d8:	3f 91       	pop	r19
    23da:	2f 91       	pop	r18
    23dc:	0f 90       	pop	r0
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	0f 90       	pop	r0
    23e2:	1f 90       	pop	r1
    23e4:	18 95       	reti

000023e6 <__vector_9>:

ISR(TIMER0_OVF_vect){
    23e6:	1f 92       	push	r1
    23e8:	0f 92       	push	r0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	0f 92       	push	r0
    23ee:	11 24       	eor	r1, r1
    23f0:	2f 93       	push	r18
    23f2:	3f 93       	push	r19
    23f4:	4f 93       	push	r20
    23f6:	5f 93       	push	r21
    23f8:	6f 93       	push	r22
    23fa:	7f 93       	push	r23
    23fc:	8f 93       	push	r24
    23fe:	9f 93       	push	r25
    2400:	af 93       	push	r26
    2402:	bf 93       	push	r27
    2404:	ef 93       	push	r30
    2406:	ff 93       	push	r31
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_0 != NULL_PTR)
    2410:	80 91 e2 00 	lds	r24, 0x00E2
    2414:	90 91 e3 00 	lds	r25, 0x00E3
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	29 f0       	breq	.+10     	; 0x2426 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    241c:	e0 91 e2 00 	lds	r30, 0x00E2
    2420:	f0 91 e3 00 	lds	r31, 0x00E3
    2424:	09 95       	icall
	}
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	ff 91       	pop	r31
    242c:	ef 91       	pop	r30
    242e:	bf 91       	pop	r27
    2430:	af 91       	pop	r26
    2432:	9f 91       	pop	r25
    2434:	8f 91       	pop	r24
    2436:	7f 91       	pop	r23
    2438:	6f 91       	pop	r22
    243a:	5f 91       	pop	r21
    243c:	4f 91       	pop	r20
    243e:	3f 91       	pop	r19
    2440:	2f 91       	pop	r18
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	2f 93       	push	r18
    2458:	3f 93       	push	r19
    245a:	4f 93       	push	r20
    245c:	5f 93       	push	r21
    245e:	6f 93       	push	r22
    2460:	7f 93       	push	r23
    2462:	8f 93       	push	r24
    2464:	9f 93       	push	r25
    2466:	af 93       	push	r26
    2468:	bf 93       	push	r27
    246a:	ef 93       	push	r30
    246c:	ff 93       	push	r31
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_1 != NULL_PTR)
    2476:	80 91 e4 00 	lds	r24, 0x00E4
    247a:	90 91 e5 00 	lds	r25, 0x00E5
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	29 f0       	breq	.+10     	; 0x248c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2482:	e0 91 e4 00 	lds	r30, 0x00E4
    2486:	f0 91 e5 00 	lds	r31, 0x00E5
    248a:	09 95       	icall
	}
}
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	ff 91       	pop	r31
    2492:	ef 91       	pop	r30
    2494:	bf 91       	pop	r27
    2496:	af 91       	pop	r26
    2498:	9f 91       	pop	r25
    249a:	8f 91       	pop	r24
    249c:	7f 91       	pop	r23
    249e:	6f 91       	pop	r22
    24a0:	5f 91       	pop	r21
    24a2:	4f 91       	pop	r20
    24a4:	3f 91       	pop	r19
    24a6:	2f 91       	pop	r18
    24a8:	0f 90       	pop	r0
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	0f 90       	pop	r0
    24ae:	1f 90       	pop	r1
    24b0:	18 95       	reti

000024b2 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    24b2:	1f 92       	push	r1
    24b4:	0f 92       	push	r0
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	0f 92       	push	r0
    24ba:	11 24       	eor	r1, r1
    24bc:	2f 93       	push	r18
    24be:	3f 93       	push	r19
    24c0:	4f 93       	push	r20
    24c2:	5f 93       	push	r21
    24c4:	6f 93       	push	r22
    24c6:	7f 93       	push	r23
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
    24cc:	af 93       	push	r26
    24ce:	bf 93       	push	r27
    24d0:	ef 93       	push	r30
    24d2:	ff 93       	push	r31
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_1 != NULL_PTR)
    24dc:	80 91 e4 00 	lds	r24, 0x00E4
    24e0:	90 91 e5 00 	lds	r25, 0x00E5
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	29 f0       	breq	.+10     	; 0x24f2 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24e8:	e0 91 e4 00 	lds	r30, 0x00E4
    24ec:	f0 91 e5 00 	lds	r31, 0x00E5
    24f0:	09 95       	icall
	}
}
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	ff 91       	pop	r31
    24f8:	ef 91       	pop	r30
    24fa:	bf 91       	pop	r27
    24fc:	af 91       	pop	r26
    24fe:	9f 91       	pop	r25
    2500:	8f 91       	pop	r24
    2502:	7f 91       	pop	r23
    2504:	6f 91       	pop	r22
    2506:	5f 91       	pop	r21
    2508:	4f 91       	pop	r20
    250a:	3f 91       	pop	r19
    250c:	2f 91       	pop	r18
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <__vector_8>:

ISR(TIMER1_OVF_vect){
    2518:	1f 92       	push	r1
    251a:	0f 92       	push	r0
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	0f 92       	push	r0
    2520:	11 24       	eor	r1, r1
    2522:	2f 93       	push	r18
    2524:	3f 93       	push	r19
    2526:	4f 93       	push	r20
    2528:	5f 93       	push	r21
    252a:	6f 93       	push	r22
    252c:	7f 93       	push	r23
    252e:	8f 93       	push	r24
    2530:	9f 93       	push	r25
    2532:	af 93       	push	r26
    2534:	bf 93       	push	r27
    2536:	ef 93       	push	r30
    2538:	ff 93       	push	r31
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_1 != NULL_PTR)
    2542:	80 91 e4 00 	lds	r24, 0x00E4
    2546:	90 91 e5 00 	lds	r25, 0x00E5
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	29 f0       	breq	.+10     	; 0x2558 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    254e:	e0 91 e4 00 	lds	r30, 0x00E4
    2552:	f0 91 e5 00 	lds	r31, 0x00E5
    2556:	09 95       	icall
	}
}
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	ff 91       	pop	r31
    255e:	ef 91       	pop	r30
    2560:	bf 91       	pop	r27
    2562:	af 91       	pop	r26
    2564:	9f 91       	pop	r25
    2566:	8f 91       	pop	r24
    2568:	7f 91       	pop	r23
    256a:	6f 91       	pop	r22
    256c:	5f 91       	pop	r21
    256e:	4f 91       	pop	r20
    2570:	3f 91       	pop	r19
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	4f 93       	push	r20
    258e:	5f 93       	push	r21
    2590:	6f 93       	push	r22
    2592:	7f 93       	push	r23
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	af 93       	push	r26
    259a:	bf 93       	push	r27
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_2 != NULL_PTR)
    25a8:	80 91 e6 00 	lds	r24, 0x00E6
    25ac:	90 91 e7 00 	lds	r25, 0x00E7
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	29 f0       	breq	.+10     	; 0x25be <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25b4:	e0 91 e6 00 	lds	r30, 0x00E6
    25b8:	f0 91 e7 00 	lds	r31, 0x00E7
    25bc:	09 95       	icall
	}
}
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	ff 91       	pop	r31
    25c4:	ef 91       	pop	r30
    25c6:	bf 91       	pop	r27
    25c8:	af 91       	pop	r26
    25ca:	9f 91       	pop	r25
    25cc:	8f 91       	pop	r24
    25ce:	7f 91       	pop	r23
    25d0:	6f 91       	pop	r22
    25d2:	5f 91       	pop	r21
    25d4:	4f 91       	pop	r20
    25d6:	3f 91       	pop	r19
    25d8:	2f 91       	pop	r18
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	0f 90       	pop	r0
    25e0:	1f 90       	pop	r1
    25e2:	18 95       	reti

000025e4 <__vector_4>:

ISR(TIMER2_OVF_vect){
    25e4:	1f 92       	push	r1
    25e6:	0f 92       	push	r0
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	0f 92       	push	r0
    25ec:	11 24       	eor	r1, r1
    25ee:	2f 93       	push	r18
    25f0:	3f 93       	push	r19
    25f2:	4f 93       	push	r20
    25f4:	5f 93       	push	r21
    25f6:	6f 93       	push	r22
    25f8:	7f 93       	push	r23
    25fa:	8f 93       	push	r24
    25fc:	9f 93       	push	r25
    25fe:	af 93       	push	r26
    2600:	bf 93       	push	r27
    2602:	ef 93       	push	r30
    2604:	ff 93       	push	r31
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer_2 != NULL_PTR)
    260e:	80 91 e6 00 	lds	r24, 0x00E6
    2612:	90 91 e7 00 	lds	r25, 0x00E7
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	29 f0       	breq	.+10     	; 0x2624 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer_2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    261a:	e0 91 e6 00 	lds	r30, 0x00E6
    261e:	f0 91 e7 00 	lds	r31, 0x00E7
    2622:	09 95       	icall
	}
}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	ff 91       	pop	r31
    262a:	ef 91       	pop	r30
    262c:	bf 91       	pop	r27
    262e:	af 91       	pop	r26
    2630:	9f 91       	pop	r25
    2632:	8f 91       	pop	r24
    2634:	7f 91       	pop	r23
    2636:	6f 91       	pop	r22
    2638:	5f 91       	pop	r21
    263a:	4f 91       	pop	r20
    263c:	3f 91       	pop	r19
    263e:	2f 91       	pop	r18
    2640:	0f 90       	pop	r0
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	0f 90       	pop	r0
    2646:	1f 90       	pop	r1
    2648:	18 95       	reti

0000264a <Timer_init>:
 *  2. Set the required mode (Normal-CTC)
 * 	3. Set the required clock prescaler.
 * 	4. Set the required initial value
 * 	5. Set the required compare value (in case of CTC mode)
 */
void Timer_init(const Timers_ConfigType * Config_PTR){
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <Timer_init+0x6>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
	if(Config_PTR->timer_id==TIMER_0){
    2658:	e9 81       	ldd	r30, Y+1	; 0x01
    265a:	fa 81       	ldd	r31, Y+2	; 0x02
    265c:	80 81       	ld	r24, Z
    265e:	88 23       	and	r24, r24
    2660:	d9 f5       	brne	.+118    	; 0x26d8 <Timer_init+0x8e>
		OCR0  = Config_PTR->COMP_value; // Set Compare Value in case of compare mode
    2662:	ac e5       	ldi	r26, 0x5C	; 92
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	83 81       	ldd	r24, Z+3	; 0x03
    266c:	94 81       	ldd	r25, Z+4	; 0x04
    266e:	8c 93       	st	X, r24
		TCNT0 = Config_PTR->initial_value; // Set Timer initial value to 0
    2670:	a2 e5       	ldi	r26, 0x52	; 82
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e9 81       	ldd	r30, Y+1	; 0x01
    2676:	fa 81       	ldd	r31, Y+2	; 0x02
    2678:	81 81       	ldd	r24, Z+1	; 0x01
    267a:	92 81       	ldd	r25, Z+2	; 0x02
    267c:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
		 */
		TCCR0 = (1<<FOC0);
    267e:	e3 e5       	ldi	r30, 0x53	; 83
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 e8       	ldi	r24, 0x80	; 128
    2684:	80 83       	st	Z, r24

		if(Config_PTR->timer_mode==NORMAL){
    2686:	e9 81       	ldd	r30, Y+1	; 0x01
    2688:	fa 81       	ldd	r31, Y+2	; 0x02
    268a:	85 81       	ldd	r24, Z+5	; 0x05
    268c:	88 23       	and	r24, r24
    268e:	41 f4       	brne	.+16     	; 0x26a0 <Timer_init+0x56>
			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2690:	a9 e5       	ldi	r26, 0x59	; 89
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e9 e5       	ldi	r30, 0x59	; 89
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	81 60       	ori	r24, 0x01	; 1
    269c:	8c 93       	st	X, r24
    269e:	0e c0       	rjmp	.+28     	; 0x26bc <Timer_init+0x72>
		}
		else{
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare match Interrupt
    26a0:	a9 e5       	ldi	r26, 0x59	; 89
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e9 e5       	ldi	r30, 0x59	; 89
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	82 60       	ori	r24, 0x02	; 2
    26ac:	8c 93       	st	X, r24
			TCCR0 |= (1<<WGM01);
    26ae:	a3 e5       	ldi	r26, 0x53	; 83
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e3 e5       	ldi	r30, 0x53	; 83
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	88 60       	ori	r24, 0x08	; 8
    26ba:	8c 93       	st	X, r24
		}

		TCCR0 = (TCCR0 & 0XF8) | (Config_PTR->timer_prescaler & 0X07); //Setting the prescaler
    26bc:	a3 e5       	ldi	r26, 0x53	; 83
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e3 e5       	ldi	r30, 0x53	; 83
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	98 2f       	mov	r25, r24
    26c8:	98 7f       	andi	r25, 0xF8	; 248
    26ca:	e9 81       	ldd	r30, Y+1	; 0x01
    26cc:	fa 81       	ldd	r31, Y+2	; 0x02
    26ce:	86 81       	ldd	r24, Z+6	; 0x06
    26d0:	87 70       	andi	r24, 0x07	; 7
    26d2:	89 2b       	or	r24, r25
    26d4:	8c 93       	st	X, r24
    26d6:	7b c0       	rjmp	.+246    	; 0x27ce <Timer_init+0x184>
	}
	else if(Config_PTR->timer_id==TIMER_1){
    26d8:	e9 81       	ldd	r30, Y+1	; 0x01
    26da:	fa 81       	ldd	r31, Y+2	; 0x02
    26dc:	80 81       	ld	r24, Z
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	e1 f5       	brne	.+120    	; 0x275a <Timer_init+0x110>
		TCNT1 = Config_PTR->initial_value; // Set Timer initial value to 0
    26e2:	ac e4       	ldi	r26, 0x4C	; 76
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	81 81       	ldd	r24, Z+1	; 0x01
    26ec:	92 81       	ldd	r25, Z+2	; 0x02
    26ee:	11 96       	adiw	r26, 0x01	; 1
    26f0:	9c 93       	st	X, r25
    26f2:	8e 93       	st	-X, r24
		OCR1A  = Config_PTR->COMP_value; // Set Compare Value in case of compare mode
    26f4:	aa e4       	ldi	r26, 0x4A	; 74
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e9 81       	ldd	r30, Y+1	; 0x01
    26fa:	fa 81       	ldd	r31, Y+2	; 0x02
    26fc:	83 81       	ldd	r24, Z+3	; 0x03
    26fe:	94 81       	ldd	r25, Z+4	; 0x04
    2700:	11 96       	adiw	r26, 0x01	; 1
    2702:	9c 93       	st	X, r25
    2704:	8e 93       	st	-X, r24
		if(Config_PTR->timer_mode==NORMAL){
    2706:	e9 81       	ldd	r30, Y+1	; 0x01
    2708:	fa 81       	ldd	r31, Y+2	; 0x02
    270a:	85 81       	ldd	r24, Z+5	; 0x05
    270c:	88 23       	and	r24, r24
    270e:	41 f4       	brne	.+16     	; 0x2720 <Timer_init+0xd6>
			TIMSK |= (1<<TOIE1);
    2710:	a9 e5       	ldi	r26, 0x59	; 89
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e9 e5       	ldi	r30, 0x59	; 89
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	84 60       	ori	r24, 0x04	; 4
    271c:	8c 93       	st	X, r24
    271e:	0b c0       	rjmp	.+22     	; 0x2736 <Timer_init+0xec>
		}
		else{
			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2720:	a9 e5       	ldi	r26, 0x59	; 89
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e9 e5       	ldi	r30, 0x59	; 89
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	80 61       	ori	r24, 0x10	; 16
    272c:	8c 93       	st	X, r24
			TCCR1B = (1<<WGM12);	/*selecting the CTC mode*/
    272e:	ee e4       	ldi	r30, 0x4E	; 78
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	88 e0       	ldi	r24, 0x08	; 8
    2734:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2736:	ef e4       	ldi	r30, 0x4F	; 79
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	8c e0       	ldi	r24, 0x0C	; 12
    273c:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler = F_CPU/8 CS10=0 CS11=1 CS12=0
		 */
		TCCR1B = (TCCR1B & 0XF8) | (Config_PTR->timer_prescaler & 0X07);
    273e:	ae e4       	ldi	r26, 0x4E	; 78
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	ee e4       	ldi	r30, 0x4E	; 78
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	98 2f       	mov	r25, r24
    274a:	98 7f       	andi	r25, 0xF8	; 248
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	86 81       	ldd	r24, Z+6	; 0x06
    2752:	87 70       	andi	r24, 0x07	; 7
    2754:	89 2b       	or	r24, r25
    2756:	8c 93       	st	X, r24
    2758:	3a c0       	rjmp	.+116    	; 0x27ce <Timer_init+0x184>
	}
	else{
		OCR2  = Config_PTR->COMP_value; // Set Compare Value in case of compare mode
    275a:	a3 e4       	ldi	r26, 0x43	; 67
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e9 81       	ldd	r30, Y+1	; 0x01
    2760:	fa 81       	ldd	r31, Y+2	; 0x02
    2762:	83 81       	ldd	r24, Z+3	; 0x03
    2764:	94 81       	ldd	r25, Z+4	; 0x04
    2766:	8c 93       	st	X, r24
		TCNT2 = Config_PTR->initial_value; // Set Timer initial value to 0
    2768:	a4 e4       	ldi	r26, 0x44	; 68
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	81 81       	ldd	r24, Z+1	; 0x01
    2772:	92 81       	ldd	r25, Z+2	; 0x02
    2774:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
		 */
		TCCR2 = (1<<FOC2);
    2776:	e5 e4       	ldi	r30, 0x45	; 69
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 e8       	ldi	r24, 0x80	; 128
    277c:	80 83       	st	Z, r24
		if(Config_PTR->timer_mode==NORMAL){
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	85 81       	ldd	r24, Z+5	; 0x05
    2784:	88 23       	and	r24, r24
    2786:	41 f4       	brne	.+16     	; 0x2798 <Timer_init+0x14e>
			TIMSK |= (1<<TOIE2); // Enable Timer0 Overflow Interrupt
    2788:	a9 e5       	ldi	r26, 0x59	; 89
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e9 e5       	ldi	r30, 0x59	; 89
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	80 64       	ori	r24, 0x40	; 64
    2794:	8c 93       	st	X, r24
    2796:	0e c0       	rjmp	.+28     	; 0x27b4 <Timer_init+0x16a>
		}
		else{
			TIMSK |= (1<<OCIE2); // Enable Timer0 Compare match Interrupt
    2798:	a9 e5       	ldi	r26, 0x59	; 89
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e9 e5       	ldi	r30, 0x59	; 89
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 68       	ori	r24, 0x80	; 128
    27a4:	8c 93       	st	X, r24
			TCCR2 |= (1<<WGM21);
    27a6:	a5 e4       	ldi	r26, 0x45	; 69
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e4       	ldi	r30, 0x45	; 69
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 60       	ori	r24, 0x08	; 8
    27b2:	8c 93       	st	X, r24
		}
		TCCR2 = (TCCR2 & 0XF8) | (Config_PTR->timer_prescaler & 0X07); //Setting the prescaler
    27b4:	a5 e4       	ldi	r26, 0x45	; 69
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e5 e4       	ldi	r30, 0x45	; 69
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	98 2f       	mov	r25, r24
    27c0:	98 7f       	andi	r25, 0xF8	; 248
    27c2:	e9 81       	ldd	r30, Y+1	; 0x01
    27c4:	fa 81       	ldd	r31, Y+2	; 0x02
    27c6:	86 81       	ldd	r24, Z+6	; 0x06
    27c8:	87 70       	andi	r24, 0x07	; 7
    27ca:	89 2b       	or	r24, r25
    27cc:	8c 93       	st	X, r24
	}
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void),const Timer_ID timer_num){
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <Timer_setCallBack+0x6>
    27de:	0f 92       	push	r0
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	6b 83       	std	Y+3, r22	; 0x03
	if(timer_num==TIMER_0){
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	88 23       	and	r24, r24
    27ee:	39 f4       	brne	.+14     	; 0x27fe <Timer_setCallBack+0x26>
		g_callBackPtr_timer_0=a_ptr;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	90 93 e3 00 	sts	0x00E3, r25
    27f8:	80 93 e2 00 	sts	0x00E2, r24
    27fc:	10 c0       	rjmp	.+32     	; 0x281e <Timer_setCallBack+0x46>
	}
	else if(timer_num==TIMER_1){
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	39 f4       	brne	.+14     	; 0x2812 <Timer_setCallBack+0x3a>
		g_callBackPtr_timer_1=a_ptr;
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	90 93 e5 00 	sts	0x00E5, r25
    280c:	80 93 e4 00 	sts	0x00E4, r24
    2810:	06 c0       	rjmp	.+12     	; 0x281e <Timer_setCallBack+0x46>
	}
	else{
		g_callBackPtr_timer_2=a_ptr;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	90 93 e7 00 	sts	0x00E7, r25
    281a:	80 93 e6 00 	sts	0x00E6, r24
	}
}
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <Timer_DeInit>:


void Timer_DeInit(const Timer_ID timer_num){
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	0f 92       	push	r0
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	89 83       	std	Y+1, r24	; 0x01
	if(timer_num==TIMER_0){
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	88 23       	and	r24, r24
    283a:	21 f4       	brne	.+8      	; 0x2844 <Timer_DeInit+0x1a>
		TCCR0=0;
    283c:	e3 e5       	ldi	r30, 0x53	; 83
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	10 82       	st	Z, r1
    2842:	0d c0       	rjmp	.+26     	; 0x285e <Timer_DeInit+0x34>
	}
	else if(timer_num==TIMER_1){
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	81 30       	cpi	r24, 0x01	; 1
    2848:	39 f4       	brne	.+14     	; 0x2858 <Timer_DeInit+0x2e>
		TCCR1A=0;
    284a:	ef e4       	ldi	r30, 0x4F	; 79
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	10 82       	st	Z, r1
		TCCR1B=0;
    2850:	ee e4       	ldi	r30, 0x4E	; 78
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	10 82       	st	Z, r1
    2856:	03 c0       	rjmp	.+6      	; 0x285e <Timer_DeInit+0x34>
	}
	else{
		TCCR2=0;
    2858:	e5 e4       	ldi	r30, 0x45	; 69
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	10 82       	st	Z, r1
	}
}
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_PTR)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	00 d0       	rcall	.+0      	; 0x286c <UART_init+0x6>
    286c:	00 d0       	rcall	.+0      	; 0x286e <UART_init+0x8>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2876:	1a 82       	std	Y+2, r1	; 0x02
    2878:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    287a:	eb e2       	ldi	r30, 0x2B	; 43
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2882:	ea e2       	ldi	r30, 0x2A	; 42
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	88 e1       	ldi	r24, 0x18	; 24
    2888:	80 83       	st	Z, r24
	if(Config_PTR->character_size==BIT_9){
    288a:	eb 81       	ldd	r30, Y+3	; 0x03
    288c:	fc 81       	ldd	r31, Y+4	; 0x04
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	87 30       	cpi	r24, 0x07	; 7
    2892:	39 f4       	brne	.+14     	; 0x28a2 <UART_init+0x3c>
		UCSRB|=(1<<UCSZ2);
    2894:	aa e2       	ldi	r26, 0x2A	; 42
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	ea e2       	ldi	r30, 0x2A	; 42
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	84 60       	ori	r24, 0x04	; 4
    28a0:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    28a2:	e0 e4       	ldi	r30, 0x40	; 64
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 e8       	ldi	r24, 0x80	; 128
    28a8:	80 83       	st	Z, r24
	UCSRC |= ((Config_PTR->parity_bits & 0X03)<<4) | ((Config_PTR->stop_bits & 0X01)<<3)|\
    28aa:	a0 e4       	ldi	r26, 0x40	; 64
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e0 e4       	ldi	r30, 0x40	; 64
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	38 2f       	mov	r19, r24
    28b6:	eb 81       	ldd	r30, Y+3	; 0x03
    28b8:	fc 81       	ldd	r31, Y+4	; 0x04
    28ba:	80 81       	ld	r24, Z
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	83 70       	andi	r24, 0x03	; 3
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	82 95       	swap	r24
    28c6:	92 95       	swap	r25
    28c8:	90 7f       	andi	r25, 0xF0	; 240
    28ca:	98 27       	eor	r25, r24
    28cc:	80 7f       	andi	r24, 0xF0	; 240
    28ce:	98 27       	eor	r25, r24
    28d0:	28 2f       	mov	r18, r24
    28d2:	eb 81       	ldd	r30, Y+3	; 0x03
    28d4:	fc 81       	ldd	r31, Y+4	; 0x04
    28d6:	81 81       	ldd	r24, Z+1	; 0x01
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	81 70       	andi	r24, 0x01	; 1
    28de:	90 70       	andi	r25, 0x00	; 0
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	28 2b       	or	r18, r24
    28ee:	eb 81       	ldd	r30, Y+3	; 0x03
    28f0:	fc 81       	ldd	r31, Y+4	; 0x04
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	83 70       	andi	r24, 0x03	; 3
    28fa:	90 70       	andi	r25, 0x00	; 0
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	82 2b       	or	r24, r18
    2902:	83 2b       	or	r24, r19
    2904:	8c 93       	st	X, r24
			((Config_PTR->character_size & 0X03)<<1);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_PTR->baud_rate * 8UL))) - 1);
    2906:	eb 81       	ldd	r30, Y+3	; 0x03
    2908:	fc 81       	ldd	r31, Y+4	; 0x04
    290a:	83 81       	ldd	r24, Z+3	; 0x03
    290c:	94 81       	ldd	r25, Z+4	; 0x04
    290e:	a5 81       	ldd	r26, Z+5	; 0x05
    2910:	b6 81       	ldd	r27, Z+6	; 0x06
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	aa 1f       	adc	r26, r26
    2918:	bb 1f       	adc	r27, r27
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	aa 1f       	adc	r26, r26
    2920:	bb 1f       	adc	r27, r27
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	aa 1f       	adc	r26, r26
    2928:	bb 1f       	adc	r27, r27
    292a:	9c 01       	movw	r18, r24
    292c:	ad 01       	movw	r20, r26
    292e:	80 e4       	ldi	r24, 0x40	; 64
    2930:	92 e4       	ldi	r25, 0x42	; 66
    2932:	af e0       	ldi	r26, 0x0F	; 15
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__udivmodsi4>
    293e:	da 01       	movw	r26, r20
    2940:	c9 01       	movw	r24, r18
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2948:	e0 e4       	ldi	r30, 0x40	; 64
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	89 2f       	mov	r24, r25
    2952:	99 27       	eor	r25, r25
    2954:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2956:	e9 e2       	ldi	r30, 0x29	; 41
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	80 83       	st	Z, r24
}
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	0f 92       	push	r0
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2978:	eb e2       	ldi	r30, 0x2B	; 43
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	80 72       	andi	r24, 0x20	; 32
    2984:	90 70       	andi	r25, 0x00	; 0
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	b9 f3       	breq	.-18     	; 0x2978 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    298a:	ec e2       	ldi	r30, 0x2C	; 44
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2992:	0f 90       	pop	r0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    29a2:	eb e2       	ldi	r30, 0x2B	; 43
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	88 23       	and	r24, r24
    29aa:	dc f7       	brge	.-10     	; 0x29a2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    29ac:	ec e2       	ldi	r30, 0x2C	; 44
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
}
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	00 d0       	rcall	.+0      	; 0x29be <UART_sendString+0x6>
    29be:	0f 92       	push	r0
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	9b 83       	std	Y+3, r25	; 0x03
    29c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29c8:	19 82       	std	Y+1, r1	; 0x01
    29ca:	0e c0       	rjmp	.+28     	; 0x29e8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	9b 81       	ldd	r25, Y+3	; 0x03
    29d6:	fc 01       	movw	r30, r24
    29d8:	e2 0f       	add	r30, r18
    29da:	f3 1f       	adc	r31, r19
    29dc:	80 81       	ld	r24, Z
    29de:	0e 94 b6 14 	call	0x296c	; 0x296c <UART_sendByte>
		i++;
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	88 23       	and	r24, r24
    29fc:	39 f7       	brne	.-50     	; 0x29cc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <UART_receiveString+0xa>
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9b 83       	std	Y+3, r25	; 0x03
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a1e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	8c 01       	movw	r16, r24
    2a2c:	02 0f       	add	r16, r18
    2a2e:	13 1f       	adc	r17, r19
    2a30:	0e 94 cd 14 	call	0x299a	; 0x299a <UART_recieveByte>
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 83       	st	Z, r24
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	8c 01       	movw	r16, r24
    2a4c:	02 0f       	add	r16, r18
    2a4e:	13 1f       	adc	r17, r19
    2a50:	0e 94 cd 14 	call	0x299a	; 0x299a <UART_recieveByte>
    2a54:	f8 01       	movw	r30, r16
    2a56:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	80 81       	ld	r24, Z
    2a6a:	83 32       	cpi	r24, 0x23	; 35
    2a6c:	31 f7       	brne	.-52     	; 0x2a3a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	10 82       	st	Z, r1
}
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	08 95       	ret

00002a90 <__udivmodsi4>:
    2a90:	a1 e2       	ldi	r26, 0x21	; 33
    2a92:	1a 2e       	mov	r1, r26
    2a94:	aa 1b       	sub	r26, r26
    2a96:	bb 1b       	sub	r27, r27
    2a98:	fd 01       	movw	r30, r26
    2a9a:	0d c0       	rjmp	.+26     	; 0x2ab6 <__udivmodsi4_ep>

00002a9c <__udivmodsi4_loop>:
    2a9c:	aa 1f       	adc	r26, r26
    2a9e:	bb 1f       	adc	r27, r27
    2aa0:	ee 1f       	adc	r30, r30
    2aa2:	ff 1f       	adc	r31, r31
    2aa4:	a2 17       	cp	r26, r18
    2aa6:	b3 07       	cpc	r27, r19
    2aa8:	e4 07       	cpc	r30, r20
    2aaa:	f5 07       	cpc	r31, r21
    2aac:	20 f0       	brcs	.+8      	; 0x2ab6 <__udivmodsi4_ep>
    2aae:	a2 1b       	sub	r26, r18
    2ab0:	b3 0b       	sbc	r27, r19
    2ab2:	e4 0b       	sbc	r30, r20
    2ab4:	f5 0b       	sbc	r31, r21

00002ab6 <__udivmodsi4_ep>:
    2ab6:	66 1f       	adc	r22, r22
    2ab8:	77 1f       	adc	r23, r23
    2aba:	88 1f       	adc	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	1a 94       	dec	r1
    2ac0:	69 f7       	brne	.-38     	; 0x2a9c <__udivmodsi4_loop>
    2ac2:	60 95       	com	r22
    2ac4:	70 95       	com	r23
    2ac6:	80 95       	com	r24
    2ac8:	90 95       	com	r25
    2aca:	9b 01       	movw	r18, r22
    2acc:	ac 01       	movw	r20, r24
    2ace:	bd 01       	movw	r22, r26
    2ad0:	cf 01       	movw	r24, r30
    2ad2:	08 95       	ret

00002ad4 <__prologue_saves__>:
    2ad4:	2f 92       	push	r2
    2ad6:	3f 92       	push	r3
    2ad8:	4f 92       	push	r4
    2ada:	5f 92       	push	r5
    2adc:	6f 92       	push	r6
    2ade:	7f 92       	push	r7
    2ae0:	8f 92       	push	r8
    2ae2:	9f 92       	push	r9
    2ae4:	af 92       	push	r10
    2ae6:	bf 92       	push	r11
    2ae8:	cf 92       	push	r12
    2aea:	df 92       	push	r13
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	ca 1b       	sub	r28, r26
    2afe:	db 0b       	sbc	r29, r27
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	09 94       	ijmp

00002b0c <__epilogue_restores__>:
    2b0c:	2a 88       	ldd	r2, Y+18	; 0x12
    2b0e:	39 88       	ldd	r3, Y+17	; 0x11
    2b10:	48 88       	ldd	r4, Y+16	; 0x10
    2b12:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b14:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b16:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b18:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b1e:	b9 84       	ldd	r11, Y+9	; 0x09
    2b20:	c8 84       	ldd	r12, Y+8	; 0x08
    2b22:	df 80       	ldd	r13, Y+7	; 0x07
    2b24:	ee 80       	ldd	r14, Y+6	; 0x06
    2b26:	fd 80       	ldd	r15, Y+5	; 0x05
    2b28:	0c 81       	ldd	r16, Y+4	; 0x04
    2b2a:	1b 81       	ldd	r17, Y+3	; 0x03
    2b2c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b30:	ce 0f       	add	r28, r30
    2b32:	d1 1d       	adc	r29, r1
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	ed 01       	movw	r28, r26
    2b40:	08 95       	ret

00002b42 <itoa>:
    2b42:	fb 01       	movw	r30, r22
    2b44:	9f 01       	movw	r18, r30
    2b46:	e8 94       	clt
    2b48:	42 30       	cpi	r20, 0x02	; 2
    2b4a:	c4 f0       	brlt	.+48     	; 0x2b7c <itoa+0x3a>
    2b4c:	45 32       	cpi	r20, 0x25	; 37
    2b4e:	b4 f4       	brge	.+44     	; 0x2b7c <itoa+0x3a>
    2b50:	4a 30       	cpi	r20, 0x0A	; 10
    2b52:	29 f4       	brne	.+10     	; 0x2b5e <itoa+0x1c>
    2b54:	97 fb       	bst	r25, 7
    2b56:	1e f4       	brtc	.+6      	; 0x2b5e <itoa+0x1c>
    2b58:	90 95       	com	r25
    2b5a:	81 95       	neg	r24
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	64 2f       	mov	r22, r20
    2b60:	77 27       	eor	r23, r23
    2b62:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__udivmodhi4>
    2b66:	80 5d       	subi	r24, 0xD0	; 208
    2b68:	8a 33       	cpi	r24, 0x3A	; 58
    2b6a:	0c f0       	brlt	.+2      	; 0x2b6e <itoa+0x2c>
    2b6c:	89 5d       	subi	r24, 0xD9	; 217
    2b6e:	81 93       	st	Z+, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	a1 f7       	brne	.-24     	; 0x2b5e <itoa+0x1c>
    2b76:	16 f4       	brtc	.+4      	; 0x2b7c <itoa+0x3a>
    2b78:	5d e2       	ldi	r21, 0x2D	; 45
    2b7a:	51 93       	st	Z+, r21
    2b7c:	10 82       	st	Z, r1
    2b7e:	c9 01       	movw	r24, r18
    2b80:	0c 94 c2 15 	jmp	0x2b84	; 0x2b84 <strrev>

00002b84 <strrev>:
    2b84:	dc 01       	movw	r26, r24
    2b86:	fc 01       	movw	r30, r24
    2b88:	67 2f       	mov	r22, r23
    2b8a:	71 91       	ld	r23, Z+
    2b8c:	77 23       	and	r23, r23
    2b8e:	e1 f7       	brne	.-8      	; 0x2b88 <strrev+0x4>
    2b90:	32 97       	sbiw	r30, 0x02	; 2
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <strrev+0x18>
    2b94:	7c 91       	ld	r23, X
    2b96:	6d 93       	st	X+, r22
    2b98:	70 83       	st	Z, r23
    2b9a:	62 91       	ld	r22, -Z
    2b9c:	ae 17       	cp	r26, r30
    2b9e:	bf 07       	cpc	r27, r31
    2ba0:	c8 f3       	brcs	.-14     	; 0x2b94 <strrev+0x10>
    2ba2:	08 95       	ret

00002ba4 <__udivmodhi4>:
    2ba4:	aa 1b       	sub	r26, r26
    2ba6:	bb 1b       	sub	r27, r27
    2ba8:	51 e1       	ldi	r21, 0x11	; 17
    2baa:	07 c0       	rjmp	.+14     	; 0x2bba <__udivmodhi4_ep>

00002bac <__udivmodhi4_loop>:
    2bac:	aa 1f       	adc	r26, r26
    2bae:	bb 1f       	adc	r27, r27
    2bb0:	a6 17       	cp	r26, r22
    2bb2:	b7 07       	cpc	r27, r23
    2bb4:	10 f0       	brcs	.+4      	; 0x2bba <__udivmodhi4_ep>
    2bb6:	a6 1b       	sub	r26, r22
    2bb8:	b7 0b       	sbc	r27, r23

00002bba <__udivmodhi4_ep>:
    2bba:	88 1f       	adc	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	5a 95       	dec	r21
    2bc0:	a9 f7       	brne	.-22     	; 0x2bac <__udivmodhi4_loop>
    2bc2:	80 95       	com	r24
    2bc4:	90 95       	com	r25
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	08 95       	ret

00002bcc <_exit>:
    2bcc:	f8 94       	cli

00002bce <__stop_program>:
    2bce:	ff cf       	rjmp	.-2      	; 0x2bce <__stop_program>
